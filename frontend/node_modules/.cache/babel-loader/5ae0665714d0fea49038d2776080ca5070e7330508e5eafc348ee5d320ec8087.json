{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n  const [hashToNumberMap, setHashToNumberMap] = useState({});\n\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\n  const generateUniquePair = (num1, num2) => {\n    return parseInt(CryptoJS.SHA256(`${num1},${num2}`).toString().slice(0, 8), 16) % 10;\n  };\n  const hashToTwoNumbers = input => {\n    // Gera um hash SHA-256 do input\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n\n    // Pega diferentes partes do hash para garantir exclusividade\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\n\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\n    return [num1, num2];\n  };\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões com números misturados\n\n        console.log(\"Token de Verificação:\", data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (misturados)\n  // Função para gerar os botões (misturados)\n  const generateButtons = sequence => {\n    let correctPairs = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n    correctPairs.forEach(pair => {\n      const shortNumbers = hashToTwoNumbers(`${pair[0]},${pair[1]}`);\n      allButtons.push({\n        pair,\n        isCorrect: true,\n        shortNumbers\n      });\n    });\n\n    // Removendo botões inválidos antes de adicioná-los\n    let uniqueButtons = new Set();\n    let validButtons = [];\n    allButtons.forEach(button => {\n      const key = button.pair.join(',');\n      if (!uniqueButtons.has(key)) {\n        uniqueButtons.add(key);\n        validButtons.push(button);\n      }\n    });\n    validButtons = validButtons.sort(() => Math.random() - 0.5);\n    setButtons(validButtons);\n  };\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 36\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.pair),\n        disabled: isButtonDisabled,\n        children: [button.shortNumbers[0], \", \", button.shortNumbers[1]]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this);\n  };\n\n  // Exibe a senha gerada de forma formatada\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  };\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat();\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    console.log(\"Número esperado:\", nextExpectedNumber);\n    console.log(\"Par selecionado:\", pair);\n    const hashKey = `${pair[0]},${pair[1]}`;\n    const uniqueNumber = hashToNumberMap[hashKey];\n    console.log(\"Número gerado para o par:\", uniqueNumber);\n    if (uniqueNumber === nextExpectedNumber) {\n      setInputSequence(prev => [...prev, nextExpectedNumber]);\n    } else {\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 38\n    }, this);\n\n    // Filtrando apenas os botões corretos e exibindo os números curtos correspondentes\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [password.map(pair => {\n          // Para cada par, vamos gerar os números curtos correspondentes\n          const button = buttons.find(b => b.pair[0] === pair[0] && b.pair[1] === pair[1] && b.isCorrect);\n          if (button) {\n            return `${button.shortNumbers[0]} ${button.shortNumbers[1]}`; // Exibe os números curtos correspondentes\n          }\n          return '';\n        }).join(' '), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  };\n  const getUniqueNumberForHash = hash => {\n    let number = hashToNumberMap[hash];\n    if (!number) {\n      // Se o hash não existe, atribui um novo número (pode ser o próximo número na sequência, por exemplo)\n      number = Object.keys(hashToNumberMap).length + 1;\n      setHashToNumberMap(prevMap => ({\n        ...prevMap,\n        [hash]: number\n      }));\n    }\n    return number;\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+lQKlT0wK2Sug2ny/KRnhK6SODQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumberMap","setHashToNumberMap","generateUniquePair","num1","num2","parseInt","SHA256","toString","slice","hashToTwoNumbers","input","hash","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","correctPairs","allButtons","forEach","pair","shortNumbers","isCorrect","uniqueButtons","Set","validButtons","button","key","join","has","add","sort","Math","random","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","handleButtonClick","disabled","displayPassword","flatPassword","flat","nextExpectedNumber","hashKey","uniqueNumber","prev","displayGeneratedPassword","find","b","getUniqueNumberForHash","number","Object","keys","prevMap","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n  const [hashToNumberMap, setHashToNumberMap] = useState({});\r\n\r\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\r\n  const generateUniquePair = (num1, num2) => {\r\n    return (parseInt(CryptoJS.SHA256(`${num1},${num2}`).toString().slice(0, 8), 16) % 10);\r\n  };\r\n\r\n\r\n\r\n  const hashToTwoNumbers = (input) => {\r\n    // Gera um hash SHA-256 do input\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    \r\n    // Pega diferentes partes do hash para garantir exclusividade\r\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\r\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\r\n    \r\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\r\n    return [num1, num2];\r\n  };\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões com números misturados\r\n\r\n        console.log(\"Token de Verificação:\", data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n\r\n  // Função para gerar os botões (misturados)\r\n // Função para gerar os botões (misturados)\r\n const generateButtons = (sequence) => {\r\n  let correctPairs = [];\r\n\r\n  for (let i = 0; i < sequence.length; i += 2) {\r\n    let num1 = sequence[i];\r\n    let num2 = sequence[i + 1];\r\n\r\n    correctPairs.push([num1, num2]);\r\n  }\r\n\r\n  let allButtons = [];\r\n\r\n  correctPairs.forEach(pair => {\r\n    const shortNumbers = hashToTwoNumbers(`${pair[0]},${pair[1]}`);\r\n    allButtons.push({ pair, isCorrect: true, shortNumbers });\r\n  });\r\n\r\n  // Removendo botões inválidos antes de adicioná-los\r\n  let uniqueButtons = new Set();\r\n  let validButtons = [];\r\n\r\n  allButtons.forEach(button => {\r\n    const key = button.pair.join(',');\r\n    if (!uniqueButtons.has(key)) {\r\n      uniqueButtons.add(key);\r\n      validButtons.push(button);\r\n    }\r\n  });\r\n\r\n  validButtons = validButtons.sort(() => Math.random() - 0.5);\r\n  setButtons(validButtons);\r\n};\r\n\r\nconst displayButtons = () => {\r\n  if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      {buttons.map((button, index) => (\r\n        <button\r\n          key={index}\r\n          onClick={() => handleButtonClick(button.pair)}\r\n          disabled={isButtonDisabled}\r\n        >\r\n          {button.shortNumbers[0]}, {button.shortNumbers[1]}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n  // Exibe a senha gerada de forma formatada\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat();\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n    \r\n    console.log(\"Número esperado:\", nextExpectedNumber);\r\n    console.log(\"Par selecionado:\", pair);\r\n    \r\n    const hashKey = `${pair[0]},${pair[1]}`;\r\n    const uniqueNumber = hashToNumberMap[hashKey];\r\n    \r\n    console.log(\"Número gerado para o par:\", uniqueNumber);\r\n    \r\n    if (uniqueNumber === nextExpectedNumber) {\r\n      setInputSequence((prev) => [...prev, nextExpectedNumber]);\r\n    } else {\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n  \r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n  \r\n    // Filtrando apenas os botões corretos e exibindo os números curtos correspondentes\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>\r\n          {password\r\n            .map(pair => {\r\n              // Para cada par, vamos gerar os números curtos correspondentes\r\n              const button = buttons.find(b => b.pair[0] === pair[0] && b.pair[1] === pair[1] && b.isCorrect);\r\n              if (button) {\r\n                return `${button.shortNumbers[0]} ${button.shortNumbers[1]}`;  // Exibe os números curtos correspondentes\r\n              }\r\n              return '';\r\n            })\r\n            .join(' ')}  {/* Junta os números curtos com espaço */}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n\r\nconst getUniqueNumberForHash = (hash) => {\r\n  let number = hashToNumberMap[hash];\r\n  \r\n  if (!number) {\r\n    // Se o hash não existe, atribui um novo número (pode ser o próximo número na sequência, por exemplo)\r\n    number = Object.keys(hashToNumberMap).length + 1;\r\n    setHashToNumberMap(prevMap => ({\r\n      ...prevMap,\r\n      [hash]: number\r\n    }));\r\n  }\r\n  \r\n  return number;\r\n};\r\n\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}