{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  // Inicializa password como objeto com chaves \"original\" e \"hashed\"\n  const [password, setPassword] = useState({\n    original: [],\n    hashed: []\n  });\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Função para gerar hash para cada número individualmente\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0;\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\n    let uniqueNumber = 0;\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n    // Garante que o número esteja no intervalo de 1 a 9\n    return uniqueNumber % 9 + 1;\n  };\n\n  // Função para formatar a sequência em pares\n  // Retorna um objeto com a sequência original e a versão hasheada\n  const formatSequence = sequence => {\n    let original = [];\n    let hashed = [];\n    for (let i = 0; i < sequence.length - 1; i += 2) {\n      original.push([sequence[i], sequence[i + 1]]);\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\n    }\n    // Se a sequência tiver número ímpar, trata o último elemento isoladamente\n    if (sequence.length % 2 !== 0) {\n      const lastElement = sequence[sequence.length - 1];\n      original.push([lastElement]);\n      hashed.push([hashToNumber(lastElement)]);\n    }\n    return {\n      original,\n      hashed\n    };\n  };\n\n  // Função para gerar os botões a partir da sequência\n  const generateButtons = sequence => {\n    const formatted = formatSequence(sequence);\n    setPassword(formatted);\n    // Gera os botões utilizando a versão hasheada da sequência\n    const correctPairs = formatted.hashed;\n    let allButtons = correctPairs.map(pair => ({\n      shortNumber: pair[0],\n      secondShortNumber: pair[1] || null // Caso o par seja composto por um único elemento\n    }));\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons);\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence);\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.shortNumber, button.secondShortNumber),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.shortNumber) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: button.secondShortNumber ? `${button.secondShortNumber} ou ${button.shortNumber}` : button.shortNumber\n      }, `${button.shortNumber}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = (shortNumber, secondShortNumber) => {\n    // Utiliza a sequência hasheada para a validação\n    const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n    let selectedNumber = null;\n    if (shortNumber === nextExpectedNumber) {\n      selectedNumber = shortNumber;\n    } else if (secondShortNumber === nextExpectedNumber) {\n      selectedNumber = secondShortNumber;\n    }\n    if (selectedNumber !== null) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, selectedNumber];\n        console.log('Sequência do usuário após clique:', newSequence);\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        // Embaralha os botões após o clique\n        generateButtons(password.original.flat());\n        return newSequence;\n      });\n    } else {\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true);\n      setTimeout(() => setIsButtonDisabled(false), 2000);\n    }\n  };\n\n  // Exibe a senha gerada (versão hasheada)\n  const displayGeneratedPassword = () => {\n    if (!password.original || password.original.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 70\n    }, this);\n    const generatedPassword = password.hashed.flat();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência digitada pelo usuário\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const flatPassword = password.hashed.flat();\n      // Compara diretamente a sequência inserida com a versão hasheada correta\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        // Envia a sequência original para o backend\n        sequence: password.original.flat()\n      };\n      // Criptografa o sessionId antes de enviar\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), isSessionValid && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1Ih+9AnxL3JR8uj7gB6TUeuJqos=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","original","hashed","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","formatSequence","sequence","push","lastElement","generateButtons","formatted","correctPairs","allButtons","map","pair","shortNumber","secondShortNumber","sort","Math","random","handleGenerateSession","data","generateSession","log","Array","isArray","session_id","success","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","button","index","onClick","handleButtonClick","disabled","style","includes","backgroundColor","flatPassword","flat","nextExpectedNumber","selectedNumber","prevSequence","newSequence","isCorrect","every","num","setTimeout","displayGeneratedPassword","generatedPassword","join","handleValidatePassword","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  // Inicializa password como objeto com chaves \"original\" e \"hashed\"\r\n  const [password, setPassword] = useState({ original: [], hashed: [] });\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Função para gerar hash para cada número individualmente\r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0;\r\n    }\r\n\r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\r\n    let uniqueNumber = 0;\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n    // Garante que o número esteja no intervalo de 1 a 9\r\n    return (uniqueNumber % 9) + 1;\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  // Retorna um objeto com a sequência original e a versão hasheada\r\n  const formatSequence = (sequence) => {\r\n    let original = [];\r\n    let hashed = [];\r\n    for (let i = 0; i < sequence.length - 1; i += 2) {\r\n      original.push([sequence[i], sequence[i + 1]]);\r\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\r\n    }\r\n    // Se a sequência tiver número ímpar, trata o último elemento isoladamente\r\n    if (sequence.length % 2 !== 0) {\r\n      const lastElement = sequence[sequence.length - 1];\r\n      original.push([lastElement]);\r\n      hashed.push([hashToNumber(lastElement)]);\r\n    }\r\n    return { original, hashed };\r\n  };\r\n\r\n  // Função para gerar os botões a partir da sequência\r\n  const generateButtons = (sequence) => {\r\n    const formatted = formatSequence(sequence);\r\n    setPassword(formatted);\r\n    // Gera os botões utilizando a versão hasheada da sequência\r\n    const correctPairs = formatted.hashed;\r\n    let allButtons = correctPairs.map(pair => ({\r\n      shortNumber: pair[0],\r\n      secondShortNumber: pair[1] || null, // Caso o par seja composto por um único elemento\r\n    }));\r\n    // Embaralha a ordem dos botões\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence);\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button, index) => (\r\n          <button\r\n            key={`${button.shortNumber}-${index}`}\r\n            onClick={() => handleButtonClick(button.shortNumber, button.secondShortNumber)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={inputSequence.includes(button.shortNumber) ? { backgroundColor: 'green' } : {}}\r\n          >\r\n            {button.secondShortNumber \r\n              ? `${button.secondShortNumber} ou ${button.shortNumber}` \r\n              : button.shortNumber}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (shortNumber, secondShortNumber) => {\r\n    // Utiliza a sequência hasheada para a validação\r\n    const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n  \r\n    if (nextExpectedNumber === undefined) {\r\n      toast.error('A senha já foi completamente inserida!');\r\n      return;\r\n    }\r\n  \r\n    let selectedNumber = null;\r\n    if (shortNumber === nextExpectedNumber) {\r\n      selectedNumber = shortNumber;\r\n    } else if (secondShortNumber === nextExpectedNumber) {\r\n      selectedNumber = secondShortNumber;\r\n    }\r\n  \r\n    if (selectedNumber !== null) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, selectedNumber];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n        if (newSequence.length === flatPassword.length) {\r\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n          if (isCorrect) {\r\n            toast.success('Senha correta! Acesso liberado.');\r\n          } else {\r\n            toast.error('Sequência incorreta. Tente novamente.');\r\n            setIsButtonDisabled(true);\r\n            setTimeout(() => setIsButtonDisabled(false), 2000);\r\n          }\r\n        }\r\n        // Embaralha os botões após o clique\r\n        generateButtons(password.original.flat());\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n      setIsButtonDisabled(true);\r\n      setTimeout(() => setIsButtonDisabled(false), 2000);\r\n    }\r\n  };\r\n  \r\n  // Exibe a senha gerada (versão hasheada)\r\n  const displayGeneratedPassword = () => {\r\n    if (!password.original || password.original.length === 0) return <p>Esperando sequência...</p>;\r\n    const generatedPassword = password.hashed.flat();\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência digitada pelo usuário\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n      const flatPassword = password.hashed.flat();\r\n      // Compara diretamente a sequência inserida com a versão hasheada correta\r\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n      const data = {\r\n        session_id: sessionId,\r\n        // Envia a sequência original para o backend\r\n        sequence: password.original.flat(),\r\n      };\r\n      // Criptografa o sessionId antes de enviar\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId,\r\n        },\r\n      });\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid && (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,KAAK,QAAQ,gBAAgB;AACtD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,uCAAuC;AAC9C,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACA,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC;IAAEiB,QAAQ,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAG,CAAC,CAAC;EACtE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC6B,SAAS,EAAEC,YAAY,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAM+B,YAAY,GAAIC,KAAK,IAAK;IAC9B,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE;MACzCE,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEH,KAAK,CAAC;MACjD,OAAO,CAAC;IACV;IAEA,MAAMI,IAAI,GAAGhC,QAAQ,CAACiC,MAAM,CAACL,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAClC,QAAQ,CAACmC,GAAG,CAACC,MAAM,CAAC;IAC5E,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACpCD,YAAY,IAAIL,IAAI,CAACQ,UAAU,CAACF,CAAC,CAAC;IACpC;IACA;IACA,OAAQD,YAAY,GAAG,CAAC,GAAI,CAAC;EAC/B,CAAC;;EAED;EACA;EACA,MAAMI,cAAc,GAAIC,QAAQ,IAAK;IACnC,IAAI7B,QAAQ,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,QAAQ,CAACH,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;MAC/CzB,QAAQ,CAAC8B,IAAI,CAAC,CAACD,QAAQ,CAACJ,CAAC,CAAC,EAAEI,QAAQ,CAACJ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC7CxB,MAAM,CAAC6B,IAAI,CAAC,CAAChB,YAAY,CAACe,QAAQ,CAACJ,CAAC,CAAC,CAAC,EAAEX,YAAY,CAACe,QAAQ,CAACJ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE;IACA;IACA,IAAII,QAAQ,CAACH,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MAC7B,MAAMK,WAAW,GAAGF,QAAQ,CAACA,QAAQ,CAACH,MAAM,GAAG,CAAC,CAAC;MACjD1B,QAAQ,CAAC8B,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC;MAC5B9B,MAAM,CAAC6B,IAAI,CAAC,CAAChB,YAAY,CAACiB,WAAW,CAAC,CAAC,CAAC;IAC1C;IACA,OAAO;MAAE/B,QAAQ;MAAEC;IAAO,CAAC;EAC7B,CAAC;;EAED;EACA,MAAM+B,eAAe,GAAIH,QAAQ,IAAK;IACpC,MAAMI,SAAS,GAAGL,cAAc,CAACC,QAAQ,CAAC;IAC1C9B,WAAW,CAACkC,SAAS,CAAC;IACtB;IACA,MAAMC,YAAY,GAAGD,SAAS,CAAChC,MAAM;IACrC,IAAIkC,UAAU,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,KAAK;MACzCC,WAAW,EAAED,IAAI,CAAC,CAAC,CAAC;MACpBE,iBAAiB,EAAEF,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAE;IACtC,CAAC,CAAC,CAAC;IACH;IACAF,UAAU,GAAGA,UAAU,CAACK,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IACvD/B,UAAU,CAACwB,UAAU,CAAC;EACxB,CAAC;;EAED;EACA,MAAMQ,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI,CAACjD,QAAQ,EAAE;MACbT,KAAK,CAACiC,KAAK,CAAC,uCAAuC,CAAC;MACpD;IACF;IACAL,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAM+B,IAAI,GAAG,MAAMC,eAAe,CAACnD,QAAQ,CAAC;MAC5CuB,OAAO,CAAC6B,GAAG,CAAC,yBAAyB,EAAEF,IAAI,CAAC;MAC5C,IAAIA,IAAI,IAAIA,IAAI,CAACf,QAAQ,IAAIkB,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACf,QAAQ,CAAC,EAAE;QACzDhC,YAAY,CAAC+C,IAAI,CAACK,UAAU,CAAC;QAC7B5C,QAAQ,CAACuC,IAAI,CAACxC,KAAK,CAAC;QACpBG,iBAAiB,CAAC,IAAI,CAAC;QACvByB,eAAe,CAACY,IAAI,CAACf,QAAQ,CAAC;QAC9BZ,OAAO,CAAC6B,GAAG,CAAC,uBAAuB,EAAEF,IAAI,CAACxC,KAAK,CAAC;QAChDnB,KAAK,CAACiE,OAAO,CAAC,4BAA4B,CAAC;MAC7C,CAAC,MAAM;QACLjE,KAAK,CAACiC,KAAK,CAAC,mDAAmD,CAAC;MAClE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdjC,KAAK,CAACiC,KAAK,CAAC,sBAAsB,CAAC;MACnCD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,SAAS;MACRL,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMsC,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIzC,OAAO,CAACgB,MAAM,KAAK,CAAC,EAAE,oBAAOrC,OAAA;MAAA+D,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;IAC9D,oBACEnE,OAAA;MAAKoE,SAAS,EAAC,SAAS;MAAAL,QAAA,EACrB1C,OAAO,CAAC0B,GAAG,CAAC,CAACsB,MAAM,EAAEC,KAAK,kBACzBtE,OAAA;QAEEuE,OAAO,EAAEA,CAAA,KAAMC,iBAAiB,CAACH,MAAM,CAACpB,WAAW,EAAEoB,MAAM,CAACnB,iBAAiB,CAAE;QAC/EuB,QAAQ,EAAEtD,gBAAiB;QAC3BiD,SAAS,EAAC,QAAQ;QAClBM,KAAK,EAAE7D,aAAa,CAAC8D,QAAQ,CAACN,MAAM,CAACpB,WAAW,CAAC,GAAG;UAAE2B,eAAe,EAAE;QAAQ,CAAC,GAAG,CAAC,CAAE;QAAAb,QAAA,EAErFM,MAAM,CAACnB,iBAAiB,GACrB,GAAGmB,MAAM,CAACnB,iBAAiB,OAAOmB,MAAM,CAACpB,WAAW,EAAE,GACtDoB,MAAM,CAACpB;MAAW,GARjB,GAAGoB,MAAM,CAACpB,WAAW,IAAIqB,KAAK,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAS/B,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;;EAED;EACA,MAAMK,iBAAiB,GAAGA,CAACvB,WAAW,EAAEC,iBAAiB,KAAK;IAC5D;IACA,MAAM2B,YAAY,GAAGnB,KAAK,CAACC,OAAO,CAAClD,QAAQ,CAACG,MAAM,CAAC,GAAGH,QAAQ,CAACG,MAAM,CAACkE,IAAI,CAAC,CAAC,GAAG,EAAE;IACjF,MAAMC,kBAAkB,GAAGF,YAAY,CAAChE,aAAa,CAACwB,MAAM,CAAC;IAE7D,IAAI0C,kBAAkB,KAAKpD,SAAS,EAAE;MACpC/B,KAAK,CAACiC,KAAK,CAAC,wCAAwC,CAAC;MACrD;IACF;IAEA,IAAImD,cAAc,GAAG,IAAI;IACzB,IAAI/B,WAAW,KAAK8B,kBAAkB,EAAE;MACtCC,cAAc,GAAG/B,WAAW;IAC9B,CAAC,MAAM,IAAIC,iBAAiB,KAAK6B,kBAAkB,EAAE;MACnDC,cAAc,GAAG9B,iBAAiB;IACpC;IAEA,IAAI8B,cAAc,KAAK,IAAI,EAAE;MAC3BlE,gBAAgB,CAAEmE,YAAY,IAAK;QACjC,MAAMC,WAAW,GAAG,CAAC,GAAGD,YAAY,EAAED,cAAc,CAAC;QACrDpD,OAAO,CAAC6B,GAAG,CAAC,mCAAmC,EAAEyB,WAAW,CAAC;QAC7D,IAAIA,WAAW,CAAC7C,MAAM,KAAKwC,YAAY,CAACxC,MAAM,EAAE;UAC9C,MAAM8C,SAAS,GAAGD,WAAW,CAACE,KAAK,CAAC,CAACC,GAAG,EAAEf,KAAK,KAAKe,GAAG,KAAKR,YAAY,CAACP,KAAK,CAAC,CAAC;UAChF,IAAIa,SAAS,EAAE;YACbvF,KAAK,CAACiE,OAAO,CAAC,iCAAiC,CAAC;UAClD,CAAC,MAAM;YACLjE,KAAK,CAACiC,KAAK,CAAC,uCAAuC,CAAC;YACpDT,mBAAmB,CAAC,IAAI,CAAC;YACzBkE,UAAU,CAAC,MAAMlE,mBAAmB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;UACpD;QACF;QACA;QACAuB,eAAe,CAAClC,QAAQ,CAACE,QAAQ,CAACmE,IAAI,CAAC,CAAC,CAAC;QACzC,OAAOI,WAAW;MACpB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLtF,KAAK,CAACiC,KAAK,CAAC,8CAA8CkD,kBAAkB,oBAAoB,CAAC;MACjG3D,mBAAmB,CAAC,IAAI,CAAC;MACzBkE,UAAU,CAAC,MAAMlE,mBAAmB,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IACpD;EACF,CAAC;;EAED;EACA,MAAMmE,wBAAwB,GAAGA,CAAA,KAAM;IACrC,IAAI,CAAC9E,QAAQ,CAACE,QAAQ,IAAIF,QAAQ,CAACE,QAAQ,CAAC0B,MAAM,KAAK,CAAC,EAAE,oBAAOrC,OAAA;MAAA+D,QAAA,EAAG;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;IAC9F,MAAMqB,iBAAiB,GAAG/E,QAAQ,CAACG,MAAM,CAACkE,IAAI,CAAC,CAAC;IAChD,oBACE9E,OAAA;MAAA+D,QAAA,gBACE/D,OAAA;QAAA+D,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBnE,OAAA;QAAA+D,QAAA,EAAI,IAAIyB,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;MAAG;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC;EAEV,CAAC;;EAED;EACA,MAAMuB,sBAAsB,GAAG,MAAAA,CAAA,KAAY;IACzC,IAAI;MACF9D,OAAO,CAAC6B,GAAG,CAAC,qBAAqB,EAAElD,SAAS,CAAC;MAC7C,MAAMsE,YAAY,GAAGpE,QAAQ,CAACG,MAAM,CAACkE,IAAI,CAAC,CAAC;MAC3C;MACA,IAAIjE,aAAa,CAAC4E,IAAI,CAAC,GAAG,CAAC,KAAKZ,YAAY,CAACY,IAAI,CAAC,GAAG,CAAC,EAAE;QACtD7F,KAAK,CAACiC,KAAK,CAAC,uDAAuD,CAAC;QACpE;MACF;MACA,MAAM0B,IAAI,GAAG;QACXK,UAAU,EAAErD,SAAS;QACrB;QACAiC,QAAQ,EAAE/B,QAAQ,CAACE,QAAQ,CAACmE,IAAI,CAAC;MACnC,CAAC;MACD;MACA,MAAMa,kBAAkB,GAAG7F,QAAQ,CAAC8F,GAAG,CAACC,OAAO,CAACtF,SAAS,EAAE,eAAe,CAAC,CAACyB,QAAQ,CAAC,CAAC;MACtF,MAAM8D,QAAQ,GAAG,MAAMjG,KAAK,CAACkG,IAAI,CAAC,yCAAyC,EAAExC,IAAI,EAAE;QACjFyC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUlF,KAAK,EAAE;UAChC,sBAAsB,EAAE4E;QAC1B;MACF,CAAC,CAAC;MACF/D,OAAO,CAAC6B,GAAG,CAAC,mCAAmC,EAAEqC,QAAQ,CAACvC,IAAI,CAAC;MAC/D3D,KAAK,CAACiE,OAAO,CAAC,iCAAiC,CAAC;MAChD3C,iBAAiB,CAAC,KAAK,CAAC;IAC1B,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdD,OAAO,CAAC6B,GAAG,CAAC,iBAAiB,EAAE5B,KAAK,CAACiE,QAAQ,GAAGjE,KAAK,CAACiE,QAAQ,CAACvC,IAAI,GAAG1B,KAAK,CAACqE,OAAO,CAAC;MACpFtG,KAAK,CAACiC,KAAK,CAAC,6BAA6B,CAAC;IAC5C;EACF,CAAC;;EAED;EACA,MAAM2B,eAAe,GAAG,MAAOnD,QAAQ,IAAK;IAC1C,MAAMyF,QAAQ,GAAG,MAAMjG,KAAK,CAACkG,IAAI,CAAC,wCAAwC,EAAE;MAAE1F;IAAS,CAAC,CAAC;IACzFuB,OAAO,CAAC6B,GAAG,CAAC,uCAAuC,EAAEqC,QAAQ,CAACvC,IAAI,CAAC;IACnE,OAAOuC,QAAQ,CAACvC,IAAI;EACtB,CAAC;EAED,oBACEvD,OAAA;IAAKoE,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClB/D,OAAA;MAAA+D,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAExBnE,OAAA;MAAKoE,SAAS,EAAC,gBAAgB;MAAAL,QAAA,gBAC7B/D,OAAA;QAAOmG,OAAO,EAAC,UAAU;QAAApC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAClDnE,OAAA;QACEoG,EAAE,EAAC,UAAU;QACbC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEjG,QAAS;QAChBkG,QAAQ,EAAGC,CAAC,IAAKlG,WAAW,CAACkG,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC7CI,WAAW,EAAC;MAA4B;QAAA1C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnE,OAAA;MAAQuE,OAAO,EAAEjB,qBAAsB;MAACc,SAAS,EAAC,gBAAgB;MAACK,QAAQ,EAAElD,SAAU;MAAAwC,QAAA,EACpFxC,SAAS,GAAG,mBAAmB,GAAG;IAAmB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,EAERlD,cAAc,iBACbjB,OAAA,CAAAE,SAAA;MAAA6D,QAAA,GACGwB,wBAAwB,CAAC,CAAC,eAC3BvF,OAAA;QAAA+D,QAAA,EAAI;MAA8C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvDnE,OAAA;QAAKoE,SAAS,EAAC,mBAAmB;QAAAL,QAAA,EAAED,cAAc,CAAC;MAAC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3DnE,OAAA;QAAA+D,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BnE,OAAA;QAAA+D,QAAA,EAAIlD,aAAa,CAAC4E,IAAI,CAAC,GAAG;MAAC;QAAAzB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCnE,OAAA;QAAQuE,OAAO,EAAEmB,sBAAuB;QAACtB,SAAS,EAAC,gBAAgB;QAAAL,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACT,CACH,eAEDnE,OAAA,CAACL,cAAc;MAAAqE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV;AAAC/D,EAAA,CAhPQD,GAAG;AAAAwG,EAAA,GAAHxG,GAAG;AAkPZ,eAAeA,GAAG;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}