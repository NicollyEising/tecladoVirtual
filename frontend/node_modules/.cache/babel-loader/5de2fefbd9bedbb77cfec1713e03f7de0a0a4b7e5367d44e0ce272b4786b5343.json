{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [buttons, setButtons] = useState([]);\n  const [token, setToken] = useState('');\n  const [password, setPassword] = useState('');\n  const [inputSequence, setInputSequence] = useState([]);\n  const generateSession = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/generate_session');\n      setSessionId(response.data.session_id);\n      setButtons(response.data.sequence);\n      setToken(response.data.token);\n      setPassword(response.data.password); // Armazenando a senha gerada\n      setInputSequence([]); // Limpar a sequência ao gerar nova sessão\n\n      // Exibindo os dados que o servidor retornou no console\n      console.log('Session ID gerado:', response.data.session_id);\n      console.log('Sequência de botões:', response.data.sequence);\n      console.log('Senha gerada:', response.data.password);\n      console.log('Token gerado:', response.data.token);\n    } catch (error) {\n      console.error('Erro ao gerar sessão:', error);\n      alert('Erro ao gerar sessão. Verifique a conexão com o servidor.');\n    }\n  };\n  const handleButtonClick = pair => {\n    setInputSequence(prevSequence => [...prevSequence, pair]);\n\n    // Exibindo os botões pressionados no console\n    console.log('Botão pressionado:', pair);\n    console.log('Sequência atual de botões:', [...inputSequence, pair]);\n  };\n  const validateSequence = async () => {\n    if (!sessionId || inputSequence.length === 0) {\n      alert('Sessão inválida ou sequência vazia.');\n      return;\n    }\n\n    // Verificando se o formato da sequência está correto antes de enviar\n    console.log('Dados a serem enviados para validação:');\n    console.log('Session ID:', sessionId);\n    console.log('Sequência digitada:', inputSequence); // Deve ser um array de arrays, ex: [[1,4], [2,7], [3,8], ...]\n    console.log('Token:', token);\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n        session_id: sessionId,\n        sequence: inputSequence\n      },\n      // Envia a sequência como array de arrays\n      {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      } // Cabeçalho com o token\n      );\n      alert(response.data.message);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Erro na validação:', error);\n      alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Erro na validação da sequência.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateSession,\n      children: \"Gerar Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Senha gerada: \", password]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), \"  \", buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair),\n        children: [\"[\", pair[0], \", \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateSequence,\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0/XqKfxJAgeGieai7VW89tfi6Ys=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","sessionId","setSessionId","buttons","setButtons","token","setToken","password","setPassword","inputSequence","setInputSequence","generateSession","response","post","data","session_id","sequence","console","log","error","alert","handleButtonClick","pair","prevSequence","validateSequence","length","headers","Authorization","message","_error$response","_error$response$data","detail","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [buttons, setButtons] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n\r\n  const generateSession = async () => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/generate_session');\r\n      setSessionId(response.data.session_id);\r\n      setButtons(response.data.sequence);\r\n      setToken(response.data.token);\r\n      setPassword(response.data.password);  // Armazenando a senha gerada\r\n      setInputSequence([]); // Limpar a sequência ao gerar nova sessão\r\n\r\n      // Exibindo os dados que o servidor retornou no console\r\n      console.log('Session ID gerado:', response.data.session_id);\r\n      console.log('Sequência de botões:', response.data.sequence);\r\n      console.log('Senha gerada:', response.data.password);\r\n      console.log('Token gerado:', response.data.token);\r\n    } catch (error) {\r\n      console.error('Erro ao gerar sessão:', error);\r\n      alert('Erro ao gerar sessão. Verifique a conexão com o servidor.');\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (pair) => {\r\n    setInputSequence((prevSequence) => [...prevSequence, pair]);\r\n\r\n    // Exibindo os botões pressionados no console\r\n    console.log('Botão pressionado:', pair);\r\n    console.log('Sequência atual de botões:', [...inputSequence, pair]);\r\n  };\r\n\r\n  const validateSequence = async () => {\r\n    if (!sessionId || inputSequence.length === 0) {\r\n      alert('Sessão inválida ou sequência vazia.');\r\n      return;\r\n    }\r\n  \r\n    // Verificando se o formato da sequência está correto antes de enviar\r\n    console.log('Dados a serem enviados para validação:');\r\n    console.log('Session ID:', sessionId);\r\n    console.log('Sequência digitada:', inputSequence); // Deve ser um array de arrays, ex: [[1,4], [2,7], [3,8], ...]\r\n    console.log('Token:', token);\r\n  \r\n    try {\r\n      const response = await axios.post(\r\n        'http://127.0.0.1:8000/validate_sequence',\r\n        { session_id: sessionId, sequence: inputSequence }, // Envia a sequência como array de arrays\r\n        { headers: { Authorization: `Bearer ${token}` } } // Cabeçalho com o token\r\n      );\r\n      alert(response.data.message);\r\n    } catch (error) {\r\n      console.error('Erro na validação:', error);\r\n      alert(error.response?.data?.detail || 'Erro na validação da sequência.');\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <button onClick={generateSession}>Gerar Sessão</button>\r\n      <div>\r\n        <p>Senha gerada: {password}</p>  {/* Exibindo a senha gerada */}\r\n        {buttons.map((pair, index) => (\r\n          <button key={index} onClick={() => handleButtonClick(pair)}>\r\n            [{pair[0]}, {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <button onClick={validateSequence}>Validar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}