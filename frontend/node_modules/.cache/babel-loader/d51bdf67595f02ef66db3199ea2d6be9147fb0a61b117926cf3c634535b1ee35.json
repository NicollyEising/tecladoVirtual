{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n\n  // Função para gerar nova sessão\n\n  // Função para descriptografar a sequência\n\n  const decryptSequence = encryptedSequence => {\n    try {\n      const decryptedBytes = CryptoJS.AES.decrypt(encryptedSequence, 'sua-chave-secreta', {\n        mode: CryptoJS.mode.ECB,\n        padding: CryptoJS.pad.Pkcs7\n      });\n      const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\n      if (!decryptedData) {\n        throw new Error('Erro ao descriptografar, dados vazios.');\n      }\n      console.log('Dados descriptografados:', decryptedData);\n    } catch (error) {\n      console.error('Erro na descriptografia:', error);\n    }\n  };\n\n  // Atualização da função handleGenerateSession para descriptografar a sequência\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && typeof data.sequence === 'string') {\n        // Descriptografando a sequência recebida\n        const decryptedSequence = decryptSequence(data.sequence);\n        if (decryptedSequence && Array.isArray(decryptedSequence)) {\n          setSessionId(data.session_id);\n          setPassword(formatSequence(decryptedSequence)); // Guardando a senha formatada\n          setToken(data.token);\n          setIsSessionValid(true);\n          generateButtons(decryptedSequence); // Gera botões com a sequência descriptografada\n\n          console.log(\"Token de Verificação:\", data.token);\n          toast.success('Sessão gerada com sucesso!');\n        } else {\n          toast.error('Erro: a sequência não foi retornada corretamente.');\n        }\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Formata a sequência correta em pares\n  const formatSequence = sequence => {\n    if (!Array.isArray(sequence)) {\n      console.error(\"A sequência não é uma matriz válida:\", sequence);\n      return [];\n    }\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      if (sequence[i] && sequence[i + 1]) {\n        formatted.push([sequence[i], sequence[i + 1]]);\n      }\n    }\n    return formatted;\n  };\n\n  // Função para validar a seleção\n  const isValidSelection = selectedNumber => {\n    const flatPassword = password.flat(); // Aqui \"achata\" a sequência correta da senha\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Verifica o próximo número esperado\n    return selectedNumber === nextExpectedNumber;\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\n    const isValid = pair.includes(nextExpectedNumber);\n    if (isValid) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        return newSequence;\n      });\n      // Aqui você pode alterar o estilo do botão ou exibir feedback visual\n    } else {\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n      // Você pode adicionar uma lógica aqui para alterar o estilo visual do botão incorreto\n    }\n  };\n\n  // Gera botões misturados, incluindo as alternativas corretas\n  const generateButtons = sequence => {\n    let correctPairs = [];\n\n    // Criar pares corretos com opções alternativas\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n\n      // Adiciona cada par como uma opção alternada\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n\n    // Adiciona os pares corretos\n    correctPairs.forEach(pair => {\n      allButtons.push(pair);\n    });\n\n    // Adiciona pares falsos aleatórios\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10); // Número aleatório entre 0-9\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n\n    // Embaralha os pares de botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os botões embaralhados no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair) // Passa o par inteiro para a função de clique\n        ,\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência ao final\n  const handleValidatePassword = async () => {\n    try {\n      console.log(\"Session ID enviado:\", sessionId);\n      const formattedSequence = [];\n      for (let i = 0; i < inputSequence.length; i += 2) {\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\n      }\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\n\n      // Verifique a correspondência da sequência\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\n        return pair[0] === password[index][0] && pair[1] === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        toast.error('Sequência incorreta');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n\n  // Exibe a senha gerada de forma formatada\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), displayPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), displayButtons(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequência selecionada ainda...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QP7fkk/X+Eyp9jbv71tHJv8d/Ls=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","decryptSequence","encryptedSequence","decryptedBytes","AES","decrypt","mode","ECB","padding","pad","Pkcs7","decryptedData","toString","enc","Utf8","Error","console","log","error","handleGenerateSession","data","generateSession","sequence","decryptedSequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","isValidSelection","selectedNumber","flatPassword","flat","nextExpectedNumber","handleButtonClick","pair","isValid","includes","prevSequence","newSequence","correctPairs","num1","num2","allButtons","forEach","Math","floor","random","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","disabled","handleValidatePassword","formattedSequence","isSequenceCorrect","every","response","post","headers","Authorization","message","displayPassword","join","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';  // Importe a biblioteca\r\n\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n\r\n  // Função para gerar nova sessão\r\n\r\n  // Função para descriptografar a sequência\r\n  \r\nconst decryptSequence = (encryptedSequence) => {\r\n  try {\r\n    const decryptedBytes = CryptoJS.AES.decrypt(encryptedSequence, 'sua-chave-secreta', { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 });\r\n    const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\r\n    if (!decryptedData) {\r\n      throw new Error('Erro ao descriptografar, dados vazios.');\r\n    }\r\n    console.log('Dados descriptografados:', decryptedData);\r\n  } catch (error) {\r\n    console.error('Erro na descriptografia:', error);\r\n  }\r\n\r\n};\r\n\r\n  \r\n  \r\n  \r\n  // Atualização da função handleGenerateSession para descriptografar a sequência\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n  \r\n      if (data && data.sequence && typeof data.sequence === 'string') {\r\n        // Descriptografando a sequência recebida\r\n        const decryptedSequence = decryptSequence(data.sequence);\r\n        \r\n        if (decryptedSequence && Array.isArray(decryptedSequence)) {\r\n          setSessionId(data.session_id);\r\n          setPassword(formatSequence(decryptedSequence)); // Guardando a senha formatada\r\n          setToken(data.token);\r\n          setIsSessionValid(true);\r\n          generateButtons(decryptedSequence); // Gera botões com a sequência descriptografada\r\n  \r\n          console.log(\"Token de Verificação:\", data.token);\r\n          toast.success('Sessão gerada com sucesso!');\r\n        } else {\r\n          toast.error('Erro: a sequência não foi retornada corretamente.');\r\n        }\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n  \r\n  // Formata a sequência correta em pares\r\n  const formatSequence = (sequence) => {\r\n    if (!Array.isArray(sequence)) {\r\n      console.error(\"A sequência não é uma matriz válida:\", sequence);\r\n      return [];\r\n    }\r\n  \r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      if (sequence[i] && sequence[i + 1]) {\r\n        formatted.push([sequence[i], sequence[i + 1]]);\r\n      }\r\n    }\r\n    return formatted;\r\n  };\r\n  \r\n\r\n  // Função para validar a seleção\r\n  const isValidSelection = (selectedNumber) => {\r\n    const flatPassword = password.flat();  // Aqui \"achata\" a sequência correta da senha\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];  // Verifica o próximo número esperado\r\n    return selectedNumber === nextExpectedNumber;\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\nconst handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n    \r\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\r\n    const isValid = pair.includes(nextExpectedNumber);\r\n\r\n    if (isValid) {\r\n        setInputSequence((prevSequence) => {\r\n            const newSequence = [...prevSequence, nextExpectedNumber];\r\n            return newSequence;\r\n        });\r\n        // Aqui você pode alterar o estilo do botão ou exibir feedback visual\r\n    } else {\r\n        toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n        // Você pode adicionar uma lógica aqui para alterar o estilo visual do botão incorreto\r\n    }\r\n};\r\n\r\n  // Gera botões misturados, incluindo as alternativas corretas\r\n  const generateButtons = (sequence) => {\r\n    let correctPairs = [];\r\n    \r\n    // Criar pares corretos com opções alternativas\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let num1 = sequence[i];\r\n      let num2 = sequence[i + 1];\r\n      \r\n      // Adiciona cada par como uma opção alternada\r\n      correctPairs.push([num1, num2]);\r\n    }\r\n\r\n    let allButtons = [];\r\n\r\n    // Adiciona os pares corretos\r\n    correctPairs.forEach(pair => {\r\n      allButtons.push(pair);\r\n    });\r\n\r\n    // Adiciona pares falsos aleatórios\r\n    for (let i = 0; i < correctPairs.length; i++) {\r\n      let num1 = Math.floor(Math.random() * 10);  // Número aleatório entre 0-9\r\n      let num2 = Math.floor(Math.random() * 10);\r\n      allButtons.push([num1, num2]);\r\n    }\r\n\r\n    // Embaralha os pares de botões\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n    // Define os botões embaralhados no estado\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}  // Passa o par inteiro para a função de clique\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência ao final\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log(\"Session ID enviado:\", sessionId);\r\n  \r\n      const formattedSequence = [];\r\n      for (let i = 0; i < inputSequence.length; i += 2) {\r\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\r\n      }\r\n  \r\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\r\n  \r\n      // Verifique a correspondência da sequência\r\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\r\n        return (\r\n          pair[0] === password[index][0] && pair[1] === password[index][1]\r\n        );\r\n      });\r\n  \r\n      if (!isSequenceCorrect) {\r\n        toast.error('Sequência incorreta');\r\n        return;\r\n      }\r\n  \r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence\r\n      };\r\n  \r\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n  \r\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n      setIsButtonDisabled(true);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  \r\n  \r\n  \r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  // Exibe a senha gerada de forma formatada\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession}>Gerar Nova Sessão</button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          {displayPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          {displayButtons()}\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequência selecionada ainda...\"}</p>\r\n\r\n          <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n          {/* Exibe o Token de Verificação */}\r\n          <div>\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}