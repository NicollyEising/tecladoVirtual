{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n  const [hashToNumberMap, setHashToNumberMap] = useState({});\n\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\n  const hashToShortNumber = input => {\n    // Gera um hash SHA-256 do input\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n    // Pega os primeiros 8 caracteres do hash e converte para decimal\n    const hashPart = parseInt(hash.slice(0, 8), 16);\n    // Limita o número ao intervalo 1000-9999\n    return 0 + hashPart % 9; // Garante que o número esteja entre 1000 e 9999\n  };\n  const hashToTwoNumbers = input => {\n    // Gera um hash SHA-256 do input\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n\n    // Pega diferentes partes do hash para garantir exclusividade\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\n\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\n    return [num1, num2];\n  };\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões com números misturados\n\n        console.log(\"Token de Verificação:\", data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (misturados)\n  // Função para gerar os botões (misturados)\n  const generateButtons = sequence => {\n    let correctPairs = [];\n\n    // Criar pares corretos com opções alternativas\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n\n      // Adiciona cada par como uma opção alternada\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n\n    // Adiciona os pares corretos\n    correctPairs.forEach(pair => {\n      allButtons.push({\n        pair,\n        isCorrect: true,\n        shortNumbers: [hashToShortNumber(pair[0]), hashToShortNumber(pair[1])]\n      });\n    });\n\n    // Adiciona pares falsos aleatórios\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10); // Número aleatório entre 0-9\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push({\n        pair: [num1, num2],\n        isCorrect: false,\n        shortNumbers: [hashToShortNumber(num1), hashToShortNumber(num2)]\n      });\n    }\n\n    // Embaralha os pares de botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os botões embaralhados no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair) // Passa o par inteiro para a função de clique\n        ,\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Exibe a senha gerada de forma formatada\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  };\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Obtém o número único correspondente ao hash\n    const hash = pair.join(','); // Aqui você cria um hash do par de números, para garantir unicidade\n    const uniqueNumber = getUniqueNumberForHash(hash); // Obtém o número exclusivo para esse hash\n\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\n    const isValid = uniqueNumber === nextExpectedNumber;\n    if (isValid) {\n      // Se for válido, adiciona o número à sequência\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      // Se for inválido, exibe uma mensagem de erro e não faz nada\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [password.map(pair => {\n          // Filtra o botão correto, garantindo que o botão existe\n          const button = buttons.find(b => b[0] === pair[0] && b[1] === pair[1]);\n          if (button) {\n            return `${button[0]} ${button[1]}`; // Exibe os números curtos correspondentes\n          }\n          return ''; // Retorna vazio caso o botão não exista\n        }).join(' '), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n  const getUniqueNumberForHash = hash => {\n    let number = hashToNumberMap[hash];\n    if (!number) {\n      // Se o hash não existe, atribui um novo número (pode ser o próximo número na sequência, por exemplo)\n      number = Object.keys(hashToNumberMap).length + 1;\n      setHashToNumberMap(prevMap => ({\n        ...prevMap,\n        [hash]: number\n      }));\n    }\n    return number;\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+lQKlT0wK2Sug2ny/KRnhK6SODQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumberMap","setHashToNumberMap","hashToShortNumber","input","hash","SHA256","toString","hashPart","parseInt","slice","hashToTwoNumbers","num1","num2","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","correctPairs","allButtons","forEach","pair","isCorrect","shortNumbers","Math","floor","random","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","handleButtonClick","disabled","displayPassword","join","flatPassword","flat","nextExpectedNumber","uniqueNumber","getUniqueNumberForHash","isValid","prevSequence","newSequence","displayGeneratedPassword","button","find","b","number","Object","keys","prevMap","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n  const [hashToNumberMap, setHashToNumberMap] = useState({});\r\n\r\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\r\n  const hashToShortNumber = (input) => {\r\n    // Gera um hash SHA-256 do input\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    // Pega os primeiros 8 caracteres do hash e converte para decimal\r\n    const hashPart = parseInt(hash.slice(0, 8), 16);\r\n    // Limita o número ao intervalo 1000-9999\r\n    return 0 + (hashPart % 9); // Garante que o número esteja entre 1000 e 9999\r\n  };\r\n  const hashToTwoNumbers = (input) => {\r\n    // Gera um hash SHA-256 do input\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    \r\n    // Pega diferentes partes do hash para garantir exclusividade\r\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\r\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\r\n    \r\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\r\n    return [num1, num2];\r\n  };\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões com números misturados\r\n\r\n        console.log(\"Token de Verificação:\", data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n\r\n  // Função para gerar os botões (misturados)\r\n // Função para gerar os botões (misturados)\r\n const generateButtons = (sequence) => {\r\n  let correctPairs = [];\r\n\r\n  // Criar pares corretos com opções alternativas\r\n  for (let i = 0; i < sequence.length; i += 2) {\r\n    let num1 = sequence[i];\r\n    let num2 = sequence[i + 1];\r\n    \r\n    // Adiciona cada par como uma opção alternada\r\n    correctPairs.push([num1, num2]);\r\n  }\r\n\r\n  let allButtons = [];\r\n\r\n  // Adiciona os pares corretos\r\n  correctPairs.forEach(pair => {\r\n    allButtons.push({ pair, isCorrect: true, shortNumbers: [hashToShortNumber(pair[0]), hashToShortNumber(pair[1])] });\r\n  });\r\n\r\n  // Adiciona pares falsos aleatórios\r\n  for (let i = 0; i < correctPairs.length; i++) {\r\n    let num1 = Math.floor(Math.random() * 10);  // Número aleatório entre 0-9\r\n    let num2 = Math.floor(Math.random() * 10);\r\n    allButtons.push({ pair: [num1, num2], isCorrect: false, shortNumbers: [hashToShortNumber(num1), hashToShortNumber(num2)] });\r\n  }\r\n\r\n  // Embaralha os pares de botões\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Define os botões embaralhados no estado\r\n  setButtons(allButtons);\r\n};\r\n\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}  // Passa o par inteiro para a função de clique\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Exibe a senha gerada de forma formatada\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n    // Obtém o número único correspondente ao hash\r\n    const hash = pair.join(','); // Aqui você cria um hash do par de números, para garantir unicidade\r\n    const uniqueNumber = getUniqueNumberForHash(hash); // Obtém o número exclusivo para esse hash\r\n    \r\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\r\n    const isValid = uniqueNumber === nextExpectedNumber;\r\n\r\n    if (isValid) {\r\n      // Se for válido, adiciona o número à sequência\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log(\"Sequência do usuário após clique:\", newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      // Se for inválido, exibe uma mensagem de erro e não faz nada\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n\r\n  \r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n  \r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>\r\n          {password\r\n            .map(pair => {\r\n              // Filtra o botão correto, garantindo que o botão existe\r\n              const button = buttons.find(b => b[0] === pair[0] && b[1] === pair[1]);\r\n              if (button) {\r\n                return `${button[0]} ${button[1]}`;  // Exibe os números curtos correspondentes\r\n              }\r\n              return '';  // Retorna vazio caso o botão não exista\r\n            })\r\n            .join(' ')}  {/* Junta os números curtos com espaço */}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\nconst getUniqueNumberForHash = (hash) => {\r\n  let number = hashToNumberMap[hash];\r\n  \r\n  if (!number) {\r\n    // Se o hash não existe, atribui um novo número (pode ser o próximo número na sequência, por exemplo)\r\n    number = Object.keys(hashToNumberMap).length + 1;\r\n    setHashToNumberMap(prevMap => ({\r\n      ...prevMap,\r\n      [hash]: number\r\n    }));\r\n  }\r\n  \r\n  return number;\r\n};\r\n\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}