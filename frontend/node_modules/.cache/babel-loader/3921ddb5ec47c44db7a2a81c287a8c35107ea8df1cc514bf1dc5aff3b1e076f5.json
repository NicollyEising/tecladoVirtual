{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para gerar hash para cada número individualmente\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\n    let uniqueNumber = 0;\n\n    // Soma os códigos dos caracteres do hash\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n\n    // Garante que o número gerado esteja no intervalo de 1 a 9\n    return uniqueNumber % 9 + 1;\n  };\n\n  // Função para gerar o hash do segundo número\n  const generateSecondHash = (num, index, sequence) => {\n    const nextIndex = (index + 1) % sequence.length; // Índice do próximo número ou volta ao início\n    const nextNum = sequence[nextIndex]; // Próximo número na sequência\n    return hashToNumber(nextNum); // Gera o hash do próximo número\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões\n  // Função para gerar os botões\n  const generateButtons = sequence => {\n    let allButtons = [];\n\n    // Gera os botões para cada número da sequência\n    sequence.forEach((num, index) => {\n      // Gera o primeiro número curto a partir do número da sequência\n      const shortNumber = hashToNumber(num);\n\n      // Gera o segundo número curto usando a função separada\n      const secondShortNumber = generateSecondHash(num, index, sequence);\n      allButtons.push({\n        num,\n        // Número real\n        shortNumber,\n        // Primeiro número curto\n        secondShortNumber // Segundo número curto derivado\n      });\n    });\n\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons); // Atualiza os botões no estado\n  };\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 36\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.num) // Passa o número real, não o hash\n        ,\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.num) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.secondShortNumber, \" ou \", button.shortNumber, \" \"]\n      }, button.num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this);\n  };\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = num => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n\n    // Verifica se o número clicado corresponde ao próximo número esperado\n    if (num === nextExpectedNumber) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, num];\n        console.log('Sequência do usuário após clique:', newSequence);\n\n        // Verifica se a sequência está completa e corresponde à senha\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        return newSequence;\n      });\n    } else {\n      toast.error(`Número incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\n    }\n  };\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 39\n    }, this);\n    let generatedPassword = [];\n    password.forEach(pair => {\n      pair.forEach(num => {\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\n        generatedPassword.push(shortNumber);\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n\n      // Comparando a sequência do usuário com a senha correta\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","generateSecondHash","num","index","sequence","nextIndex","nextNum","handleGenerateSession","data","generateSession","log","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","push","allButtons","forEach","shortNumber","secondShortNumber","sort","Math","random","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","style","includes","backgroundColor","flatPassword","flat","nextExpectedNumber","prevSequence","newSequence","isCorrect","every","setTimeout","displayGeneratedPassword","generatedPassword","pair","join","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para gerar hash para cada número individualmente\r\n  const hashToNumber = (input) => {\r\n  if (input === undefined || input === null) {\r\n    console.error(\"Valor inválido para hash:\", input);\r\n    return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\r\n  }\r\n\r\n  const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\r\n  let uniqueNumber = 0;\r\n\r\n  // Soma os códigos dos caracteres do hash\r\n  for (let i = 0; i < hash.length; i++) {\r\n    uniqueNumber += hash.charCodeAt(i);\r\n  }\r\n\r\n  // Garante que o número gerado esteja no intervalo de 1 a 9\r\n  return (uniqueNumber % 9) + 1;\r\n};\r\n\r\n// Função para gerar o hash do segundo número\r\nconst generateSecondHash = (num, index, sequence) => {\r\n  const nextIndex = (index + 1) % sequence.length; // Índice do próximo número ou volta ao início\r\n  const nextNum = sequence[nextIndex]; // Próximo número na sequência\r\n  return hashToNumber(nextNum); // Gera o hash do próximo número\r\n};\r\n\r\n\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Ativa o loading\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões\r\n// Função para gerar os botões\r\nconst generateButtons = (sequence) => {\r\n  let allButtons = [];\r\n\r\n  // Gera os botões para cada número da sequência\r\n  sequence.forEach((num, index) => {\r\n    // Gera o primeiro número curto a partir do número da sequência\r\n    const shortNumber = hashToNumber(num);\r\n\r\n    // Gera o segundo número curto usando a função separada\r\n    const secondShortNumber = generateSecondHash(num, index, sequence);\r\n\r\n    allButtons.push({\r\n      num, // Número real\r\n      shortNumber, // Primeiro número curto\r\n      secondShortNumber, // Segundo número curto derivado\r\n    });\r\n  });\r\n\r\n  // Embaralha a ordem dos botões\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  setButtons(allButtons); // Atualiza os botões no estado\r\n};\r\n// Exibe os botões misturados\r\nconst displayButtons = () => {\r\n  if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      {buttons.map((button) => (\r\n        <button\r\n          key={button.num}\r\n          onClick={() => handleButtonClick(button.num)} // Passa o número real, não o hash\r\n          disabled={isButtonDisabled}\r\n          className=\"button\"\r\n          style={inputSequence.includes(button.num) ? { backgroundColor: 'green' } : {}}\r\n        >\r\n          {button.secondShortNumber} ou {button.shortNumber} {/* Exibe ambos os números */}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n// Função para lidar com o clique nos botões\r\nconst handleButtonClick = (num) => {\r\n  const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n  const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n  // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\r\n  if (nextExpectedNumber === undefined) {\r\n    toast.error('A senha já foi completamente inserida!');\r\n    return;\r\n  }\r\n\r\n  // Verifica se o número clicado corresponde ao próximo número esperado\r\n  if (num === nextExpectedNumber) {\r\n    setInputSequence((prevSequence) => {\r\n      const newSequence = [...prevSequence, num];\r\n      console.log('Sequência do usuário após clique:', newSequence);\r\n\r\n      // Verifica se a sequência está completa e corresponde à senha\r\n      if (newSequence.length === flatPassword.length) {\r\n        const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n        if (isCorrect) {\r\n          toast.success('Senha correta! Acesso liberado.');\r\n        } else {\r\n          toast.error('Sequência incorreta. Tente novamente.');\r\n          setIsButtonDisabled(true);\r\n          setTimeout(() => setIsButtonDisabled(false), 2000);\r\n        }\r\n      }\r\n\r\n      return newSequence;\r\n    });\r\n  } else {\r\n    toast.error(`Número incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n    setIsButtonDisabled(true); // Desabilitar todos os botões após erro\r\n    setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\r\n  }\r\n};\r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (password.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    let generatedPassword = [];\r\n    password.forEach(pair => {\r\n      pair.forEach(num => {\r\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\r\n        generatedPassword.push(shortNumber);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>  {/* Exibe o array plano como uma string */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      // Comparando a sequência do usuário com a senha correta\r\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}