{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport jwt_decode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n        username\n      });\n      const {\n        session_id\n      } = response.data;\n\n      // Decodifica o JWT para obter a sequência e a ordem\n      const decoded = jwt_decode(session_id);\n      const sequence = decoded.sequence;\n      const order = decoded.order;\n      setSessionId(session_id); // Armazena o JWT como ID de sessão\n      setPassword(formatSequence(sequence)); // Guarda a senha formatada\n      setToken(session_id); // O token é o próprio JWT\n      setIsSessionValid(true);\n      generateButtons(sequence, order); // Gera botões com base na sequência e ordem\n\n      toast.success('Sessão gerada com sucesso!');\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Formata a sequência correta em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Gera botões com base na sequência e na ordem de apresentação\n  const generateButtons = (sequence, order) => {\n    let correctPairs = formatSequence(sequence); // Formata a sequência em pares\n\n    // Cria uma lista de botões, incluindo os pares corretos e pares falsos\n    let allButtons = [];\n\n    // Adiciona os pares corretos na ordem especificada\n    order.forEach(index => {\n      allButtons.push({\n        pair: correctPairs[index],\n        isCorrect: true // Marca como correto para validação visual\n      });\n    });\n\n    // Adiciona pares falsos (opções incorretas) para dificultar adivinhação\n    const numFalsePairs = correctPairs.length; // Mesmo número de pares falsos que corretos\n    for (let i = 0; i < numFalsePairs; i++) {\n      let falsePair;\n      do {\n        falsePair = [Math.floor(Math.random() * 10),\n        // Número aleatório entre 0-9\n        Math.floor(Math.random() * 10)];\n      } while (correctPairs.some(pair => pair[0] === falsePair[0] && pair[1] === falsePair[1])); // Garante que o par falso não seja igual a um par correto\n\n      allButtons.push({\n        pair: falsePair,\n        isCorrect: false // Marca como falso para validação visual\n      });\n    }\n\n    // Embaralha os botões para que a ordem visual não revele os pares corretos\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os botões no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões na tela com feedback visual\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 36\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.pair, index) // Passa o par e o índice do botão\n        ,\n        disabled: isButtonDisabled,\n        className: `button ${button.clicked ? button.isCorrect ? 'correct' : 'incorrect' : ''}` // Adiciona classes para feedback visual\n        ,\n        children: [\"[\", button.pair[0], \" ou \", button.pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = (pair, buttonIndex) => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\n    const isValid = pair.includes(nextExpectedNumber);\n\n    // Atualiza o estado dos botões para fornecer feedback visual\n    setButtons(prevButtons => prevButtons.map((button, index) => {\n      if (index === buttonIndex) {\n        return {\n          ...button,\n          clicked: true,\n          // Marca o botão como clicado\n          isCorrect: isValid // Marca se a escolha foi correta\n        };\n      }\n      return button;\n    }));\n    if (isValid) {\n      // Se for válido, adiciona o número à sequência\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n\n      // Feedback visual e sonoro\n      toast.success(`Número ${nextExpectedNumber} selecionado corretamente!`);\n    } else {\n      // Se for inválido, exibe uma mensagem de erro\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Função para validar a sequência ao final\n  const handleValidatePassword = async () => {\n    try {\n      // Formata a sequência do usuário em pares\n      const formattedSequence = [];\n      for (let i = 0; i < inputSequence.length; i += 2) {\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\n      }\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\n\n      // Verifica se a sequência está correta\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\n        return pair[0] === password[index][0] && pair[1] === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        toast.error('Sequência incorreta');\n        return;\n      }\n\n      // Envia a validação ao backend\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n        session_id: sessionId,\n        sequence: formattedSequence\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}` // Envia o JWT como token\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Exibe a senha gerada de forma formatada\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 37\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 5\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), displayPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), displayButtons(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.length > 0 ? inputSequence.join(' ') : 'Nenhuma sequência selecionada ainda...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"QP7fkk/X+Eyp9jbv71tHJv8d/Ls=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jwt_decode","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","handleGenerateSession","error","response","post","session_id","data","decoded","sequence","order","formatSequence","generateButtons","success","console","formatted","i","length","push","correctPairs","allButtons","forEach","index","pair","isCorrect","numFalsePairs","falsePair","Math","floor","random","some","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","clicked","buttonIndex","flatPassword","flat","nextExpectedNumber","isValid","includes","prevButtons","prevSequence","newSequence","log","handleValidatePassword","formattedSequence","isSequenceCorrect","every","headers","Authorization","message","displayPassword","join","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';  // Importe a biblioteca\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n      const { session_id } = response.data;\r\n\r\n      // Decodifica o JWT para obter a sequência e a ordem\r\n      const decoded = jwt_decode(session_id);\r\n      const sequence = decoded.sequence;\r\n      const order = decoded.order;\r\n\r\n      setSessionId(session_id); // Armazena o JWT como ID de sessão\r\n      setPassword(formatSequence(sequence)); // Guarda a senha formatada\r\n      setToken(session_id); // O token é o próprio JWT\r\n      setIsSessionValid(true);\r\n      generateButtons(sequence, order); // Gera botões com base na sequência e ordem\r\n\r\n      toast.success('Sessão gerada com sucesso!');\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Formata a sequência correta em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Gera botões com base na sequência e na ordem de apresentação\r\nconst generateButtons = (sequence, order) => {\r\n  let correctPairs = formatSequence(sequence); // Formata a sequência em pares\r\n\r\n  // Cria uma lista de botões, incluindo os pares corretos e pares falsos\r\n  let allButtons = [];\r\n\r\n  // Adiciona os pares corretos na ordem especificada\r\n  order.forEach((index) => {\r\n    allButtons.push({\r\n      pair: correctPairs[index],\r\n      isCorrect: true, // Marca como correto para validação visual\r\n    });\r\n  });\r\n\r\n  // Adiciona pares falsos (opções incorretas) para dificultar adivinhação\r\n  const numFalsePairs = correctPairs.length; // Mesmo número de pares falsos que corretos\r\n  for (let i = 0; i < numFalsePairs; i++) {\r\n    let falsePair;\r\n    do {\r\n      falsePair = [\r\n        Math.floor(Math.random() * 10), // Número aleatório entre 0-9\r\n        Math.floor(Math.random() * 10),\r\n      ];\r\n    } while (\r\n      correctPairs.some(\r\n        (pair) => pair[0] === falsePair[0] && pair[1] === falsePair[1]\r\n      )\r\n    ); // Garante que o par falso não seja igual a um par correto\r\n\r\n    allButtons.push({\r\n      pair: falsePair,\r\n      isCorrect: false, // Marca como falso para validação visual\r\n    });\r\n  }\r\n\r\n  // Embaralha os botões para que a ordem visual não revele os pares corretos\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Define os botões no estado\r\n  setButtons(allButtons);\r\n};\r\n\r\n// Exibe os botões na tela com feedback visual\r\nconst displayButtons = () => {\r\n  if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n  return (\r\n    <div className=\"buttons\">\r\n      {buttons.map((button, index) => (\r\n        <button\r\n          key={index}\r\n          onClick={() => handleButtonClick(button.pair, index)} // Passa o par e o índice do botão\r\n          disabled={isButtonDisabled}\r\n          className={`button ${\r\n            button.clicked\r\n              ? button.isCorrect\r\n                ? 'correct'\r\n                : 'incorrect'\r\n              : ''\r\n          }`} // Adiciona classes para feedback visual\r\n        >\r\n          [{button.pair[0]} ou {button.pair[1]}]\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Função para lidar com o clique nos botões\r\nconst handleButtonClick = (pair, buttonIndex) => {\r\n  const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n  const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n  // Verifica se o número do par é válido (igual ao próximo número esperado)\r\n  const isValid = pair.includes(nextExpectedNumber);\r\n\r\n  // Atualiza o estado dos botões para fornecer feedback visual\r\n  setButtons((prevButtons) =>\r\n    prevButtons.map((button, index) => {\r\n      if (index === buttonIndex) {\r\n        return {\r\n          ...button,\r\n          clicked: true, // Marca o botão como clicado\r\n          isCorrect: isValid, // Marca se a escolha foi correta\r\n        };\r\n      }\r\n      return button;\r\n    })\r\n  );\r\n\r\n  if (isValid) {\r\n    // Se for válido, adiciona o número à sequência\r\n    setInputSequence((prevSequence) => {\r\n      const newSequence = [...prevSequence, nextExpectedNumber];\r\n      console.log(\"Sequência do usuário após clique:\", newSequence);\r\n      return newSequence;\r\n    });\r\n\r\n    // Feedback visual e sonoro\r\n    toast.success(`Número ${nextExpectedNumber} selecionado corretamente!`);\r\n  } else {\r\n    // Se for inválido, exibe uma mensagem de erro\r\n    toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n  }\r\n};\r\n\r\n// Função para validar a sequência ao final\r\nconst handleValidatePassword = async () => {\r\n  try {\r\n    // Formata a sequência do usuário em pares\r\n    const formattedSequence = [];\r\n    for (let i = 0; i < inputSequence.length; i += 2) {\r\n      formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\r\n    }\r\n\r\n    console.log(\"Senha do usuário antes do envio:\", formattedSequence);\r\n\r\n    // Verifica se a sequência está correta\r\n    const isSequenceCorrect = formattedSequence.every((pair, index) => {\r\n      return pair[0] === password[index][0] && pair[1] === password[index][1];\r\n    });\r\n\r\n    if (!isSequenceCorrect) {\r\n      toast.error('Sequência incorreta');\r\n      return;\r\n    }\r\n\r\n    // Envia a validação ao backend\r\n    const response = await axios.post(\r\n      'http://127.0.0.1:8000/validate_sequence',\r\n      { session_id: sessionId, sequence: formattedSequence },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`, // Envia o JWT como token\r\n        },\r\n      }\r\n    );\r\n\r\n    console.log('✅ Sequência validada com sucesso:', response.data);\r\n    toast.success('Sequência validada com sucesso!');\r\n    setIsSessionValid(false);\r\n    setIsButtonDisabled(true);\r\n  } catch (error) {\r\n    console.log('Error response:', error.response ? error.response.data : error.message);\r\n    toast.error('Erro ao validar a sequência');\r\n  }\r\n};\r\n\r\n// Exibe a senha gerada de forma formatada\r\nconst displayPassword = () => {\r\n  if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n  return (\r\n    <p>\r\n      {password.map((pair) => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n    </p>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div className=\"App\">\r\n    <h1>Teclado Virtual</h1>\r\n\r\n    <div>\r\n      <label htmlFor=\"username\">Nome de Usuário:</label>\r\n      <input\r\n        id=\"username\"\r\n        type=\"text\"\r\n        value={username}\r\n        onChange={(e) => setUsername(e.target.value)}\r\n        placeholder=\"Digite seu nome de usuário\"\r\n      />\r\n    </div>\r\n\r\n    <button onClick={handleGenerateSession}>Gerar Nova Sessão</button>\r\n\r\n    {isSessionValid ? (\r\n      <>\r\n        <h2>Senha Gerada:</h2>\r\n        {displayPassword()}\r\n\r\n        <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n        {displayButtons()}\r\n\r\n        <h3>Senha Selecionada:</h3>\r\n        <p>\r\n          {inputSequence.length > 0\r\n            ? inputSequence.join(' ')\r\n            : 'Nenhuma sequência selecionada ainda...'}\r\n        </p>\r\n\r\n        <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n        {/* Exibe o Token de Verificação */}\r\n        <div>\r\n          <h3>Token de Verificação:</h3>\r\n          <p>{token}</p>\r\n        </div>\r\n      </>\r\n    ) : null}\r\n\r\n    <ToastContainer />\r\n  </div>\r\n);\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}