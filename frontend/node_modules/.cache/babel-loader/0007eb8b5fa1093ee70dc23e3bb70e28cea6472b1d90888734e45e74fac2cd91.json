{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\aqui\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState({\n    original: [],\n    hashed: []\n  });\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0;\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\n    let uniqueNumber = 0;\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n    return uniqueNumber % 9 + 1;\n  };\n  const formatSequence = sequence => {\n    let original = [];\n    let hashed = [];\n    for (let i = 0; i < sequence.length - 1; i += 2) {\n      original.push([sequence[i], sequence[i + 1]]);\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\n    }\n    if (sequence.length % 2 !== 0) {\n      const lastElement = sequence[sequence.length - 1];\n      original.push([lastElement]);\n      hashed.push([hashToNumber(lastElement)]);\n    }\n    return {\n      original,\n      hashed\n    };\n  };\n  const generateButtons = sequence => {\n    const formatted = formatSequence(sequence);\n    setPassword(formatted);\n    const allNumbers = [...Array(10).keys()];\n    const combinedNumbers = [...new Set([...allNumbers, ...formatted.hashed.flat()])];\n    const shuffledNumbers = combinedNumbers.sort(() => Math.random() - 0.5);\n    const allButtons = [];\n    for (let i = 0; i < shuffledNumbers.length; i += 2) {\n      if (i + 1 < shuffledNumbers.length) {\n        const firstNumber = shuffledNumbers[i];\n        const secondNumber = shuffledNumbers[i + 1];\n        allButtons.push({\n          shortNumber: firstNumber,\n          secondShortNumber: secondNumber\n        });\n      }\n    }\n\n    // Se houver um número ímpar (ou seja, um número sozinho)\n    if (shuffledNumbers.length % 2 !== 0) {\n      const lastElement = shuffledNumbers[shuffledNumbers.length - 1];\n\n      // Gerar um número aleatório válido baseado no hash para o número restante\n      const secondNumber = hashToNumber(lastElement); // Gera um número válido com base no hash\n\n      // Garantir que o número \"restante\" seja acompanhado de outro número aleatório válido\n      // Para isso, ao invés de simplesmente pegar o último número da lista, escolhemos um número aleatório.\n      const randomPairNumber = Math.floor(Math.random() * 9) + 1; // Número aleatório de 1 a 9\n\n      // Criar um par com o número extra\n      allButtons.push({\n        shortNumber: lastElement,\n        secondShortNumber: randomPairNumber // Acompanhado de um número aleatório\n      });\n    }\n    setButtons(allButtons);\n  };\n  const handleClearInput = () => {\n    setInputSequence([]);\n  };\n  const handleGenerateSession = async () => {\n    if (!username) {\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence);\n        handleClearSequence();\n        console.log('Token de Verificação:', data.token);\n      } else {}\n    } catch (error) {\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.shortNumber, button.secondShortNumber),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        children: button.secondShortNumber ? `${button.shortNumber} ou ${button.secondShortNumber}` : button.shortNumber\n      }, `${button.shortNumber}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  };\n  const handleButtonClick = (shortNumber, secondShortNumber) => {\n    const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    if (nextExpectedNumber === undefined) {\n      return;\n    }\n    let selectedNumber = null;\n    if (shortNumber === nextExpectedNumber) {\n      selectedNumber = shortNumber;\n    } else if (secondShortNumber === nextExpectedNumber) {\n      selectedNumber = secondShortNumber;\n    }\n    if (selectedNumber !== null) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, selectedNumber];\n        console.log('Sequência do usuário após clique:', newSequence);\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {} else {\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        generateButtons(password.original.flat());\n        return newSequence;\n      });\n    } else {\n      setIsButtonDisabled(true);\n      setTimeout(() => setIsButtonDisabled(false), 2000);\n    }\n  };\n  const handleClearSequence = () => {\n    setInputSequence([]); // Limpa a sequência de números digitados\n  };\n  const displayGeneratedPassword = () => {\n    if (!password.original || password.original.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 70\n    }, this);\n    const generatedPassword = password.hashed.flat();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"senha-gerada\",\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"senha\",\n        children: generatedPassword.join('')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  };\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const flatPassword = password.hashed.flat();\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: password.original.flat()\n      };\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n    }\n  };\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), !isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          placeholder: \"Nome de usu\\xE1rio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bx bxs-user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateSession,\n        className: \"primary-button\",\n        disabled: isLoading,\n        children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"clique\",\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"senha-digitada\",\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clear-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClearInput,\n          className: \"secondary-button\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bx bxs-eraser apagar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button .validar-senha\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1Ih+9AnxL3JR8uj7gB6TUeuJqos=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","original","hashed","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","formatSequence","sequence","push","lastElement","generateButtons","formatted","allNumbers","Array","keys","combinedNumbers","Set","flat","shuffledNumbers","sort","Math","random","allButtons","firstNumber","secondNumber","shortNumber","secondShortNumber","randomPairNumber","floor","handleClearInput","handleGenerateSession","data","generateSession","log","isArray","session_id","handleClearSequence","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","index","onClick","handleButtonClick","disabled","flatPassword","nextExpectedNumber","selectedNumber","prevSequence","newSequence","isCorrect","every","num","setTimeout","displayGeneratedPassword","generatedPassword","join","handleValidatePassword","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/aqui/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState({ original: [], hashed: [] });\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0;\r\n    }\r\n\r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\r\n    let uniqueNumber = 0;\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n    return (uniqueNumber % 9) + 1;\r\n  };\r\n\r\n  const formatSequence = (sequence) => {\r\n    let original = [];\r\n    let hashed = [];\r\n    for (let i = 0; i < sequence.length - 1; i += 2) {\r\n      original.push([sequence[i], sequence[i + 1]]);\r\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\r\n    }\r\n    if (sequence.length % 2 !== 0) {\r\n      const lastElement = sequence[sequence.length - 1];\r\n      original.push([lastElement]);\r\n      hashed.push([hashToNumber(lastElement)]);\r\n    }\r\n    return { original, hashed };\r\n  };\r\n\r\n  const generateButtons = (sequence) => {\r\n    const formatted = formatSequence(sequence);\r\n    setPassword(formatted);\r\n  \r\n    const allNumbers = [...Array(10).keys()];  \r\n  \r\n    const combinedNumbers = [...new Set([...allNumbers, ...formatted.hashed.flat()])];\r\n  \r\n    const shuffledNumbers = combinedNumbers.sort(() => Math.random() - 0.5);\r\n  \r\n    const allButtons = [];\r\n    for (let i = 0; i < shuffledNumbers.length; i += 2) {\r\n      if (i + 1 < shuffledNumbers.length) {\r\n        const firstNumber = shuffledNumbers[i];\r\n        const secondNumber = shuffledNumbers[i + 1];\r\n        allButtons.push({\r\n          shortNumber: firstNumber,\r\n          secondShortNumber: secondNumber,\r\n        });\r\n      }\r\n    }\r\n  \r\n    // Se houver um número ímpar (ou seja, um número sozinho)\r\n    if (shuffledNumbers.length % 2 !== 0) {\r\n      const lastElement = shuffledNumbers[shuffledNumbers.length - 1];\r\n  \r\n      // Gerar um número aleatório válido baseado no hash para o número restante\r\n      const secondNumber = hashToNumber(lastElement); // Gera um número válido com base no hash\r\n      \r\n      // Garantir que o número \"restante\" seja acompanhado de outro número aleatório válido\r\n      // Para isso, ao invés de simplesmente pegar o último número da lista, escolhemos um número aleatório.\r\n      const randomPairNumber = Math.floor(Math.random() * 9) + 1;  // Número aleatório de 1 a 9\r\n      \r\n      // Criar um par com o número extra\r\n      allButtons.push({\r\n        shortNumber: lastElement,\r\n        secondShortNumber: randomPairNumber,  // Acompanhado de um número aleatório\r\n      });\r\n    }\r\n  \r\n    setButtons(allButtons);\r\n  };\r\n  \r\n\r\n  const handleClearInput = () => {\r\n    setInputSequence([]);\r\n  };\r\n\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence);\r\n        handleClearSequence();\r\n        console.log('Token de Verificação:', data.token);\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button, index) => (\r\n          <button\r\n            key={`${button.shortNumber}-${index}`}\r\n            onClick={() => handleButtonClick(button.shortNumber, button.secondShortNumber)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n          >\r\n            {button.secondShortNumber\r\n              ? `${button.shortNumber} ou ${button.secondShortNumber}`\r\n              : button.shortNumber}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleButtonClick = (shortNumber, secondShortNumber) => {\r\n    const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n  \r\n    if (nextExpectedNumber === undefined) {\r\n      return;\r\n    }\r\n  \r\n    let selectedNumber = null;\r\n    if (shortNumber === nextExpectedNumber) {\r\n      selectedNumber = shortNumber;\r\n    } else if (secondShortNumber === nextExpectedNumber) {\r\n      selectedNumber = secondShortNumber;\r\n    }\r\n  \r\n    if (selectedNumber !== null) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, selectedNumber];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n        if (newSequence.length === flatPassword.length) {\r\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n          if (isCorrect) {\r\n          } else {\r\n            setIsButtonDisabled(true);\r\n            setTimeout(() => setIsButtonDisabled(false), 2000);\r\n          }\r\n        }\r\n        generateButtons(password.original.flat());\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      setIsButtonDisabled(true);\r\n      setTimeout(() => setIsButtonDisabled(false), 2000);\r\n    }\r\n  };\r\n  const handleClearSequence = () => {\r\n    setInputSequence([]);  // Limpa a sequência de números digitados\r\n  };\r\n  const displayGeneratedPassword = () => {\r\n    if (!password.original || password.original.length === 0) return <p>Esperando sequência...</p>;\r\n  \r\n    const generatedPassword = password.hashed.flat();  \r\n    return (\r\n      <div>\r\n        <h2 className=\"senha-gerada\">Senha Gerada:</h2>\r\n        <p className='senha'>{generatedPassword.join('')}</p> {}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n      const flatPassword = password.hashed.flat();\r\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\r\n        return;\r\n      }\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: password.original.flat(),\r\n      };\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId,\r\n        },\r\n      });\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App wrapper\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      {!isSessionValid ? (\r\n        <>\r\n          <div className=\"form-container\">\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              placeholder=\"Nome de usuário\"\r\n            />\r\n            <i className=\"bx bxs-user\"></i>\r\n          </div>\r\n\r\n          <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n            {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n          <h2 className='clique'>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n          <h3>Senha Selecionada:</h3>\r\n          <p className='senha-digitada'>{inputSequence.join(' ')}</p>\r\n          <div className=\"clear-button\">\r\n            <button onClick={handleClearInput} className=\"secondary-button\">\r\n              <i className='bx bxs-eraser apagar'></i>\r\n            </button>\r\n          </div>\r\n          <button onClick={handleValidatePassword} className=\"primary-button .validar-senha\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}