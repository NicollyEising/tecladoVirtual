{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\n\n  const hashToTwoNumbers = input => {\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n\n    // Divida o hash em partes distintas e use partes do hash diferentes para gerar números exclusivos\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\n\n    return [num1, num2];\n  };\n  const hashToUniqueNumber = (input, index) => {\n    const hash = CryptoJS.SHA256(input.toString() + index).toString(); // Usa o índice como salt\n    const hashPart = parseInt(hash.slice(0, 8), 16);\n    return (hashPart + index) % 9000 + 1000;\n  };\n  const generateUniqueNumber = (input, existingNumbers) => {\n    let num = hashToShortNumber(input);\n    while (existingNumbers.includes(num)) {\n      num = hashToShortNumber(input); // Regenera até encontrar um número único\n    }\n    existingNumbers.push(num);\n    return num;\n  };\n  const hashToShortNumber = input => {\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n    // Use uma parte maior do hash (por exemplo, 16 caracteres)\n    const hashPart = parseInt(hash.slice(0, 16), 16);\n    return hashPart % 9000 + 1000; // Garante que o número esteja entre 1000 e 9999\n  };\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (misturados)\n  // Função para gerar os botões (misturados)\n  const generateButtons = sequence => {\n    let uniqueHashes = new Map(); // Armazena os números gerados para garantir exclusividade\n    let correctPairs = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n    correctPairs.forEach((pair, index) => {\n      const hashKey = `${pair[0]}${pair[1]}${index}`;\n      if (!uniqueHashes.has(hashKey)) {\n        uniqueHashes.set(hashKey, hashToUniqueNumber(hashKey, index));\n      }\n      allButtons.push({\n        pair,\n        number: uniqueHashes.get(hashKey),\n        hashKey,\n        isCorrect: true\n      });\n    });\n\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.pair),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.pair[0]) || inputSequence.includes(button.pair[1]) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.shortNumbers[0], \" \", button.shortNumbers[1], \" \"]\n      }, button.hashKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se o próximo número esperado está em qualquer posição no par\n    const isValid = pair.includes(nextExpectedNumber);\n    if (isValid) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log('Sequência do usuário após clique:', newSequence);\n        return newSequence;\n      });\n    } else {\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 36\n    }, this);\n\n    // Filtrando apenas os botões corretos e exibindo os números curtos correspondentes\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [password.map(pair => {\n          // Para cada par, vamos gerar os números curtos correspondentes\n          const button = buttons.find(b => b.pair[0] === pair[0] && b.pair[1] === pair[1] && b.isCorrect);\n          if (button) {\n            return `[${button.shortNumbers[0]}, ${button.shortNumbers[1]}]`; // Exibe os números curtos correspondentes\n          }\n          return '';\n        }).join(' '), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToTwoNumbers","input","hash","SHA256","toString","num1","parseInt","slice","num2","hashToUniqueNumber","index","hashPart","generateUniqueNumber","existingNumbers","num","hashToShortNumber","includes","push","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","uniqueHashes","Map","correctPairs","allButtons","forEach","pair","hashKey","has","set","number","get","isCorrect","sort","Math","random","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","style","backgroundColor","shortNumbers","flatPassword","flat","nextExpectedNumber","isValid","prevSequence","newSequence","displayGeneratedPassword","find","b","join","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\r\n\r\n  const hashToTwoNumbers = (input) => {\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    \r\n    // Divida o hash em partes distintas e use partes do hash diferentes para gerar números exclusivos\r\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\r\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\r\n    \r\n    return [num1, num2];\r\n  };\r\n\r\n  const hashToUniqueNumber = (input, index) => {\r\n    const hash = CryptoJS.SHA256(input.toString() + index).toString(); // Usa o índice como salt\r\n    const hashPart = parseInt(hash.slice(0, 8), 16);\r\n    return (hashPart + index) % 9000 + 1000;\r\n  };\r\n\r\n  const generateUniqueNumber = (input, existingNumbers) => {\r\n    let num = hashToShortNumber(input);\r\n    while (existingNumbers.includes(num)) {\r\n      num = hashToShortNumber(input); // Regenera até encontrar um número único\r\n    }\r\n    existingNumbers.push(num);\r\n    return num;\r\n  };\r\n  const hashToShortNumber = (input) => {\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    // Use uma parte maior do hash (por exemplo, 16 caracteres)\r\n    const hashPart = parseInt(hash.slice(0, 16), 16); \r\n    return hashPart % 9000 + 1000; // Garante que o número esteja entre 1000 e 9999\r\n  };\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Ativa o loading\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (misturados)\r\n // Função para gerar os botões (misturados)\r\n const generateButtons = (sequence) => {\r\n  let uniqueHashes = new Map(); // Armazena os números gerados para garantir exclusividade\r\n  let correctPairs = [];\r\n\r\n  for (let i = 0; i < sequence.length; i += 2) {\r\n    let num1 = sequence[i];\r\n    let num2 = sequence[i + 1];\r\n    correctPairs.push([num1, num2]);\r\n  }\r\n\r\n  let allButtons = [];\r\n  correctPairs.forEach((pair, index) => {\r\n    const hashKey = `${pair[0]}${pair[1]}${index}`;\r\n    if (!uniqueHashes.has(hashKey)) {\r\n      uniqueHashes.set(hashKey, hashToUniqueNumber(hashKey, index));\r\n    }\r\n    allButtons.push({ pair, number: uniqueHashes.get(hashKey), hashKey, isCorrect: true });\r\n  });\r\n\r\n  // Embaralha a ordem dos botões\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  setButtons(allButtons);\r\n};\r\n\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.hashKey}\r\n            onClick={() => handleButtonClick(button.pair)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={\r\n              inputSequence.includes(button.pair[0]) || inputSequence.includes(button.pair[1])\r\n                ? { backgroundColor: 'green' }\r\n                : {}\r\n            }\r\n          >\r\n            {button.shortNumbers[0]} {button.shortNumbers[1]} {/* Exibe os dois números curtos */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n  \r\n    // Verifica se o próximo número esperado está em qualquer posição no par\r\n    const isValid = pair.includes(nextExpectedNumber); \r\n  \r\n    if (isValid) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n  \r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n  if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n  // Filtrando apenas os botões corretos e exibindo os números curtos correspondentes\r\n  return (\r\n    <div>\r\n      <h2>Senha Gerada:</h2>\r\n      <p>\r\n        {password\r\n          .map(pair => {\r\n            // Para cada par, vamos gerar os números curtos correspondentes\r\n            const button = buttons.find(b => b.pair[0] === pair[0] && b.pair[1] === pair[1] && b.isCorrect);\r\n            if (button) {\r\n              return `[${button.shortNumbers[0]}, ${button.shortNumbers[1]}]`;  // Exibe os números curtos correspondentes\r\n            }\r\n            return '';\r\n          })\r\n          .join(' ')}  {/* Junta os números curtos com espaço */}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}