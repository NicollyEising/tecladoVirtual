{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport jwt_decode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n\n  // Fun√ß√£o para gerar nova sess√£o\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usu√°rio.');\n      return;\n    }\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n        username\n      });\n      const {\n        session_id\n      } = response.data;\n\n      // Decodifica o JWT para obter a sequ√™ncia e a ordem\n      const decoded = jwt_decode(session_id);\n      const sequence = decoded.sequence;\n      const order = decoded.order;\n      setSessionId(session_id); // Armazena o JWT como ID de sess√£o\n      setPassword(formatSequence(sequence)); // Guarda a senha formatada\n      setToken(session_id); // O token √© o pr√≥prio JWT\n      setIsSessionValid(true);\n      generateButtons(sequence, order); // Gera bot√µes com base na sequ√™ncia e ordem\n\n      toast.success('Sess√£o gerada com sucesso!');\n    } catch (error) {\n      toast.error('Erro ao gerar sess√£o');\n      console.error('Erro ao gerar sess√£o:', error);\n    }\n  };\n\n  // Formata a sequ√™ncia correta em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n  // Fun√ß√£o para validar a sele√ß√£o\n  const isValidSelection = selectedNumber => {\n    const flatPassword = password.flat(); // Aqui \"achata\" a sequ√™ncia correta da senha\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Verifica o pr√≥ximo n√∫mero esperado\n    return selectedNumber === nextExpectedNumber;\n  };\n\n  // Fun√ß√£o para lidar com o clique nos bot√µes\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a compara√ß√£o\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obt√©m o pr√≥ximo n√∫mero esperado da senha\n\n    // Verifica se o n√∫mero do par √© v√°lido (igual ao pr√≥ximo n√∫mero esperado)\n    const isValid = pair.includes(nextExpectedNumber); // Verifica se o pr√≥ximo n√∫mero esperado est√° no par\n\n    if (isValid) {\n      // Se for v√°lido, adiciona o n√∫mero √† sequ√™ncia\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequ√™ncia do usu√°rio ap√≥s clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      // Se for inv√°lido, exibe uma mensagem de erro e n√£o faz nada\n      toast.error(`N√∫mero ${nextExpectedNumber} n√£o est√° no par. Tente novamente.`);\n    }\n  };\n\n  // Gera bot√µes misturados, incluindo as alternativas corretas\n  const generateButtons = sequence => {\n    let correctPairs = [];\n\n    // Criar pares corretos com op√ß√µes alternativas\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n\n      // Adiciona cada par como uma op√ß√£o alternada\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n\n    // Adiciona os pares corretos\n    correctPairs.forEach(pair => {\n      allButtons.push(pair);\n    });\n\n    // Adiciona pares falsos aleat√≥rios\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10); // N√∫mero aleat√≥rio entre 0-9\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n\n    // Embaralha os pares de bot√µes\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os bot√µes embaralhados no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os bot√µes misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair) // Passa o par inteiro para a fun√ß√£o de clique\n        ,\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Fun√ß√£o para validar a sequ√™ncia ao final\n  const handleValidatePassword = async () => {\n    try {\n      // Exibe o sessionId para debugar\n      console.log(\"Session ID enviado:\", sessionId); // Adicionei esta linha para verificar o sessionId\n\n      // Certifique-se de que a sequ√™ncia est√° formatada corretamente\n      const formattedSequence = [];\n      for (let i = 0; i < inputSequence.length; i += 2) {\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\n      }\n      console.log(\"Senha do usu√°rio antes do envio:\", formattedSequence);\n\n      // Verifica se a sequ√™ncia est√° correta\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\n        return pair[0] === password[index][0] && pair[1] === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        toast.error('Sequ√™ncia incorreta');\n        return;\n      }\n\n      // üîπ Defini√ß√£o da vari√°vel `data`\n      const data = {\n        session_id: sessionId,\n        // Certifique-se de que sessionId est√° armazenado corretamente\n        sequence: formattedSequence\n      };\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"‚úÖ Sequ√™ncia validada com sucesso:\", response.data);\n      toast.success('Sequ√™ncia validada com sucesso!');\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequ√™ncia');\n    }\n  };\n\n  // Fun√ß√£o para gerar sess√£o no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de gera√ß√£o de sess√£o:', response.data);\n    return response.data;\n  };\n\n  // Exibe a senha gerada de forma formatada\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), displayPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), displayButtons(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequ√™ncia selecionada ainda...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QP7fkk/X+Eyp9jbv71tHJv8d/Ls=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jwt_decode","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","handleGenerateSession","error","response","post","session_id","data","decoded","sequence","order","formatSequence","generateButtons","success","console","formatted","i","length","push","isValidSelection","selectedNumber","flatPassword","flat","nextExpectedNumber","handleButtonClick","pair","isValid","includes","prevSequence","newSequence","log","correctPairs","num1","num2","allButtons","forEach","Math","floor","random","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","disabled","handleValidatePassword","formattedSequence","isSequenceCorrect","every","headers","Authorization","message","generateSession","displayPassword","join","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avan√ßados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';  // Importe a biblioteca\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n\r\n  // Fun√ß√£o para gerar nova sess√£o\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usu√°rio.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n      const { session_id } = response.data;\r\n\r\n      // Decodifica o JWT para obter a sequ√™ncia e a ordem\r\n      const decoded = jwt_decode(session_id);\r\n      const sequence = decoded.sequence;\r\n      const order = decoded.order;\r\n\r\n      setSessionId(session_id); // Armazena o JWT como ID de sess√£o\r\n      setPassword(formatSequence(sequence)); // Guarda a senha formatada\r\n      setToken(session_id); // O token √© o pr√≥prio JWT\r\n      setIsSessionValid(true);\r\n      generateButtons(sequence, order); // Gera bot√µes com base na sequ√™ncia e ordem\r\n\r\n      toast.success('Sess√£o gerada com sucesso!');\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sess√£o');\r\n      console.error('Erro ao gerar sess√£o:', error);\r\n    }\r\n  };\r\n\r\n  // Formata a sequ√™ncia correta em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n  // Fun√ß√£o para validar a sele√ß√£o\r\n  const isValidSelection = (selectedNumber) => {\r\n    const flatPassword = password.flat();  // Aqui \"achata\" a sequ√™ncia correta da senha\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];  // Verifica o pr√≥ximo n√∫mero esperado\r\n    return selectedNumber === nextExpectedNumber;\r\n  };\r\n\r\n  // Fun√ß√£o para lidar com o clique nos bot√µes\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a compara√ß√£o\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obt√©m o pr√≥ximo n√∫mero esperado da senha\r\n    \r\n    // Verifica se o n√∫mero do par √© v√°lido (igual ao pr√≥ximo n√∫mero esperado)\r\n    const isValid = pair.includes(nextExpectedNumber); // Verifica se o pr√≥ximo n√∫mero esperado est√° no par\r\n\r\n    if (isValid) {\r\n      // Se for v√°lido, adiciona o n√∫mero √† sequ√™ncia\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log(\"Sequ√™ncia do usu√°rio ap√≥s clique:\", newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      // Se for inv√°lido, exibe uma mensagem de erro e n√£o faz nada\r\n      toast.error(`N√∫mero ${nextExpectedNumber} n√£o est√° no par. Tente novamente.`);\r\n    }\r\n  };\r\n\r\n  // Gera bot√µes misturados, incluindo as alternativas corretas\r\n  const generateButtons = (sequence) => {\r\n    let correctPairs = [];\r\n    \r\n    // Criar pares corretos com op√ß√µes alternativas\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let num1 = sequence[i];\r\n      let num2 = sequence[i + 1];\r\n      \r\n      // Adiciona cada par como uma op√ß√£o alternada\r\n      correctPairs.push([num1, num2]);\r\n    }\r\n\r\n    let allButtons = [];\r\n\r\n    // Adiciona os pares corretos\r\n    correctPairs.forEach(pair => {\r\n      allButtons.push(pair);\r\n    });\r\n\r\n    // Adiciona pares falsos aleat√≥rios\r\n    for (let i = 0; i < correctPairs.length; i++) {\r\n      let num1 = Math.floor(Math.random() * 10);  // N√∫mero aleat√≥rio entre 0-9\r\n      let num2 = Math.floor(Math.random() * 10);\r\n      allButtons.push([num1, num2]);\r\n    }\r\n\r\n    // Embaralha os pares de bot√µes\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n    // Define os bot√µes embaralhados no estado\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os bot√µes misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequ√™ncia...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}  // Passa o par inteiro para a fun√ß√£o de clique\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Fun√ß√£o para validar a sequ√™ncia ao final\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n        // Exibe o sessionId para debugar\r\n        console.log(\"Session ID enviado:\", sessionId); // Adicionei esta linha para verificar o sessionId\r\n  \r\n        // Certifique-se de que a sequ√™ncia est√° formatada corretamente\r\n        const formattedSequence = [];\r\n        for (let i = 0; i < inputSequence.length; i += 2) {\r\n            formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\r\n        }\r\n  \r\n        console.log(\"Senha do usu√°rio antes do envio:\", formattedSequence);\r\n  \r\n        // Verifica se a sequ√™ncia est√° correta\r\n        const isSequenceCorrect = formattedSequence.every((pair, index) => {\r\n            return (\r\n                pair[0] === password[index][0] && pair[1] === password[index][1]\r\n            );\r\n        });\r\n  \r\n        if (!isSequenceCorrect) {\r\n            toast.error('Sequ√™ncia incorreta');\r\n            return;\r\n        }\r\n  \r\n        // üîπ Defini√ß√£o da vari√°vel `data`\r\n        const data = {\r\n            session_id: sessionId,  // Certifique-se de que sessionId est√° armazenado corretamente\r\n            sequence: formattedSequence\r\n        };\r\n  \r\n        const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n  \r\n        console.log(\"‚úÖ Sequ√™ncia validada com sucesso:\", response.data);\r\n        toast.success('Sequ√™ncia validada com sucesso!');\r\n        setIsSessionValid(false);\r\n        setIsButtonDisabled(true);\r\n    } catch (error) {\r\n        console.log('Error response:', error.response ? error.response.data : error.message);\r\n        toast.error('Erro ao validar a sequ√™ncia');\r\n    }\r\n  };\r\n  \r\n  // Fun√ß√£o para gerar sess√£o no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de gera√ß√£o de sess√£o:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  // Exibe a senha gerada de forma formatada\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"username\">Nome de Usu√°rio:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usu√°rio\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession}>Gerar Nova Sess√£o</button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          {displayPassword()}\r\n\r\n          <h2>Clique nos bot√µes abaixo para digitar a senha:</h2>\r\n          {displayButtons()}\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequ√™ncia selecionada ainda...\"}</p>\r\n\r\n          <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n          {/* Exibe o Token de Verifica√ß√£o */}\r\n          <div>\r\n            <h3>Token de Verifica√ß√£o:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}