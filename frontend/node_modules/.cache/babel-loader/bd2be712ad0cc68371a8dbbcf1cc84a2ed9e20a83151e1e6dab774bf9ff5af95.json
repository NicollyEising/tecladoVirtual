{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\aqui\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState({\n    original: [],\n    hashed: []\n  });\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0;\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\n    let uniqueNumber = 0;\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n    return uniqueNumber % 9 + 1;\n  };\n  const formatSequence = sequence => {\n    let original = [];\n    let hashed = [];\n    for (let i = 0; i < sequence.length - 1; i += 2) {\n      original.push([sequence[i], sequence[i + 1]]);\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\n    }\n    if (sequence.length % 2 !== 0) {\n      const lastElement = sequence[sequence.length - 1];\n      original.push([lastElement]);\n      hashed.push([hashToNumber(lastElement)]);\n    }\n    return {\n      original,\n      hashed\n    };\n  };\n  const generateButtons = sequence => {\n    const formatted = formatSequence(sequence);\n    setPassword(formatted);\n\n    // Gera os pares corretos da sequência formatada\n    const correctPairs = formatted.hashed;\n    let allButtons = [];\n\n    // Cria os pares de números\n    for (let i = 0; i < correctPairs.length; i++) {\n      if (correctPairs[i].length === 2) {\n        // Se o par já for completo, adiciona diretamente\n        allButtons.push({\n          shortNumber: correctPairs[i][0],\n          secondShortNumber: correctPairs[i][1]\n        });\n      } else {\n        // Caso o par tenha apenas um número, gera um número aleatório para emparelhar\n        const randomPairNumber = Math.floor(Math.random() * 9) + 1; // Gera um número aleatório de 1 a 9\n        allButtons.push({\n          shortNumber: correctPairs[i][0],\n          secondShortNumber: randomPairNumber // Emparelha com o número aleatório\n        });\n      }\n    }\n\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Atualiza o estado com os botões gerados\n    setButtons(allButtons);\n  };\n  const handleClearInput = () => {\n    setInputSequence([]);\n  };\n  const handleGenerateSession = async () => {\n    if (!username) {\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence);\n        handleClearSequence();\n        console.log('Token de Verificação:', data.token);\n      } else {}\n    } catch (error) {\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.shortNumber, button.secondShortNumber),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        children: button.secondShortNumber ? `${button.shortNumber} ou ${button.secondShortNumber}` : button.shortNumber\n      }, `${button.shortNumber}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  };\n  const handleButtonClick = (shortNumber, secondShortNumber) => {\n    const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    if (nextExpectedNumber === undefined) {\n      return;\n    }\n    let selectedNumber = null;\n    if (shortNumber === nextExpectedNumber) {\n      selectedNumber = shortNumber;\n    } else if (secondShortNumber === nextExpectedNumber) {\n      selectedNumber = secondShortNumber;\n    } else {\n      // Se nenhum for o correto, adiciona um deles aleatoriamente\n      selectedNumber = Math.random() < 0.5 ? shortNumber : secondShortNumber;\n    }\n    setInputSequence(prevSequence => {\n      const newSequence = [...prevSequence, selectedNumber];\n      console.log('Sequência do usuário após clique:', newSequence);\n      if (newSequence.length === flatPassword.length) {\n        const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n        if (!isCorrect) {\n          setIsButtonDisabled(true);\n          setTimeout(() => setIsButtonDisabled(false), 2000);\n        }\n      }\n      generateButtons(password.original.flat());\n      return newSequence;\n    });\n  };\n  const handleClearSequence = () => {\n    setInputSequence([]); // Limpa a sequência de números digitados\n  };\n  const displayGeneratedPassword = () => {\n    if (!password.original || password.original.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 70\n    }, this);\n    const generatedPassword = password.hashed.flat();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"senha-gerada\",\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"senha\",\n        children: generatedPassword.join('')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  };\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const flatPassword = password.hashed.flat();\n\n      // Verificar se a sequência de entrada é diferente da senha esperada\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\n        // Gerar um hash incorreto (isso pode ser alterado conforme sua lógica de segurança)\n        const incorrectHash = CryptoJS.AES.encrypt(sessionId, 'nova-chave-secreta').toString();\n\n        // Enviar dados errados (senha incorreta) para o backend\n        const errorData = {\n          session_id: sessionId,\n          attempted_sequence: inputSequence.join(' '),\n          // Senha errada\n          incorrect_field: \"erro_no_campo\" // Outro campo incorreto\n        };\n\n        // Enviar os dados errados usando axios\n        const response = await axios.post('http://127.0.0.1:8000/validate_sequence', errorData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            session_id: sessionId,\n            // O ID da sessão\n            sequence: passwordSequence,\n            // A sequência digitada corretamente, no formato esperado\n            failedAttempts: failedAttempts // Simulando o envio de um hash incorreto\n          }\n        });\n\n        // Verifique a resposta do backend e logue o erro\n        console.log('Erro de senha enviado:', response.data);\n\n        // Incrementar o número de tentativas no backend\n        // (A lógica do incremento de tentativas pode ser feita no backend ao receber a tentativa incorreta)\n\n        // Logar ou exibir mensagem de erro\n        setIsSessionValid(false);\n        return; // Evitar continuar a execução após o erro\n      }\n\n      // Se a senha for correta, enviar ao backend para validação\n      const data = {\n        session_id: sessionId,\n        sequence: password.original.flat()\n      };\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n    }\n  };\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), !isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"username\",\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          placeholder: \"Nome de usu\\xE1rio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"bx bxs-user\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateSession,\n        className: \"primary-button\",\n        disabled: isLoading,\n        children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"clique\",\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"senha-digitada\",\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clear-button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClearInput,\n          className: \"secondary-button\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"bx bxs-eraser apagar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button .validar-senha\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1Ih+9AnxL3JR8uj7gB6TUeuJqos=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","original","hashed","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","formatSequence","sequence","push","lastElement","generateButtons","formatted","correctPairs","allButtons","shortNumber","secondShortNumber","randomPairNumber","Math","floor","random","sort","handleClearInput","handleGenerateSession","data","generateSession","log","Array","isArray","session_id","handleClearSequence","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","index","onClick","handleButtonClick","disabled","flatPassword","flat","nextExpectedNumber","selectedNumber","prevSequence","newSequence","isCorrect","every","num","setTimeout","displayGeneratedPassword","generatedPassword","join","handleValidatePassword","incorrectHash","AES","encrypt","errorData","attempted_sequence","incorrect_field","response","post","headers","Authorization","passwordSequence","failedAttempts","encryptedSessionId","message","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/aqui/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState({ original: [], hashed: [] });\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0;\r\n    }\r\n\r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\r\n    let uniqueNumber = 0;\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n    return (uniqueNumber % 9) + 1;\r\n  };\r\n\r\n  const formatSequence = (sequence) => {\r\n    let original = [];\r\n    let hashed = [];\r\n    for (let i = 0; i < sequence.length - 1; i += 2) {\r\n      original.push([sequence[i], sequence[i + 1]]);\r\n      hashed.push([hashToNumber(sequence[i]), hashToNumber(sequence[i + 1])]);\r\n    }\r\n    if (sequence.length % 2 !== 0) {\r\n      const lastElement = sequence[sequence.length - 1];\r\n      original.push([lastElement]);\r\n      hashed.push([hashToNumber(lastElement)]);\r\n    }\r\n    return { original, hashed };\r\n  };\r\n\r\n  const generateButtons = (sequence) => {\r\n  const formatted = formatSequence(sequence);\r\n  setPassword(formatted);\r\n\r\n  // Gera os pares corretos da sequência formatada\r\n  const correctPairs = formatted.hashed;\r\n  let allButtons = [];\r\n\r\n  // Cria os pares de números\r\n  for (let i = 0; i < correctPairs.length; i++) {\r\n    if (correctPairs[i].length === 2) {\r\n      // Se o par já for completo, adiciona diretamente\r\n      allButtons.push({\r\n        shortNumber: correctPairs[i][0],\r\n        secondShortNumber: correctPairs[i][1],\r\n      });\r\n    } else {\r\n      // Caso o par tenha apenas um número, gera um número aleatório para emparelhar\r\n      const randomPairNumber = Math.floor(Math.random() * 9) + 1;  // Gera um número aleatório de 1 a 9\r\n      allButtons.push({\r\n        shortNumber: correctPairs[i][0],\r\n        secondShortNumber: randomPairNumber,  // Emparelha com o número aleatório\r\n      });\r\n    }\r\n  }\r\n\r\n  // Embaralha a ordem dos botões\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Atualiza o estado com os botões gerados\r\n  setButtons(allButtons);\r\n};\r\n\r\n\r\n  const handleClearInput = () => {\r\n    setInputSequence([]);\r\n  };\r\n\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence);\r\n        handleClearSequence();\r\n        console.log('Token de Verificação:', data.token);\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button, index) => (\r\n          <button\r\n            key={`${button.shortNumber}-${index}`}\r\n            onClick={() => handleButtonClick(button.shortNumber, button.secondShortNumber)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n          >\r\n            {button.secondShortNumber\r\n              ? `${button.shortNumber} ou ${button.secondShortNumber}`\r\n              : button.shortNumber}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst handleButtonClick = (shortNumber, secondShortNumber) => {\r\n  const flatPassword = Array.isArray(password.hashed) ? password.hashed.flat() : [];\r\n  const nextExpectedNumber = flatPassword[inputSequence.length];\r\n\r\n  if (nextExpectedNumber === undefined) {\r\n    return;\r\n  }\r\n\r\n  let selectedNumber = null;\r\n  if (shortNumber === nextExpectedNumber) {\r\n    selectedNumber = shortNumber;\r\n  } else if (secondShortNumber === nextExpectedNumber) {\r\n    selectedNumber = secondShortNumber;\r\n  } else {\r\n    // Se nenhum for o correto, adiciona um deles aleatoriamente\r\n    selectedNumber = Math.random() < 0.5 ? shortNumber : secondShortNumber;\r\n  }\r\n\r\n  setInputSequence((prevSequence) => {\r\n    const newSequence = [...prevSequence, selectedNumber];\r\n    console.log('Sequência do usuário após clique:', newSequence);\r\n    \r\n    if (newSequence.length === flatPassword.length) {\r\n      const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n      if (!isCorrect) {\r\n        setIsButtonDisabled(true);\r\n        setTimeout(() => setIsButtonDisabled(false), 2000);\r\n      }\r\n    }\r\n\r\n    generateButtons(password.original.flat());\r\n    return newSequence;\r\n  });\r\n};\r\n\r\n\r\n  \r\n\r\n  const handleClearSequence = () => {\r\n    setInputSequence([]);  // Limpa a sequência de números digitados\r\n  };\r\n  const displayGeneratedPassword = () => {\r\n    if (!password.original || password.original.length === 0) return <p>Esperando sequência...</p>;\r\n  \r\n    const generatedPassword = password.hashed.flat();  \r\n    return (\r\n      <div>\r\n        <h2 className=\"senha-gerada\">Senha Gerada:</h2>\r\n        <p className='senha'>{generatedPassword.join('')}</p> {}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n      const flatPassword = password.hashed.flat();\r\n      \r\n      // Verificar se a sequência de entrada é diferente da senha esperada\r\n      if (inputSequence.join(' ') !== flatPassword.join(' ')) {\r\n        // Gerar um hash incorreto (isso pode ser alterado conforme sua lógica de segurança)\r\n        const incorrectHash = CryptoJS.AES.encrypt(sessionId, 'nova-chave-secreta').toString();  \r\n  \r\n        // Enviar dados errados (senha incorreta) para o backend\r\n        const errorData = {\r\n          session_id: sessionId,\r\n          attempted_sequence: inputSequence.join(' '),  // Senha errada\r\n          incorrect_field: \"erro_no_campo\",  // Outro campo incorreto\r\n        };\r\n  \r\n        // Enviar os dados errados usando axios\r\n        const response = await axios.post('http://127.0.0.1:8000/validate_sequence', errorData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            session_id: sessionId, // O ID da sessão\r\n            sequence: passwordSequence,  // A sequência digitada corretamente, no formato esperado\r\n            failedAttempts: failedAttempts, // Simulando o envio de um hash incorreto\r\n          },\r\n        });\r\n  \r\n        // Verifique a resposta do backend e logue o erro\r\n        console.log('Erro de senha enviado:', response.data);\r\n  \r\n        // Incrementar o número de tentativas no backend\r\n        // (A lógica do incremento de tentativas pode ser feita no backend ao receber a tentativa incorreta)\r\n  \r\n        // Logar ou exibir mensagem de erro\r\n        setIsSessionValid(false);\r\n        return; // Evitar continuar a execução após o erro\r\n      }\r\n  \r\n      // Se a senha for correta, enviar ao backend para validação\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: password.original.flat(),\r\n      };\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n  \r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId,\r\n        },\r\n      });\r\n  \r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      setIsSessionValid(false);\r\n  \r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App wrapper\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      {!isSessionValid ? (\r\n        <>\r\n          <div className=\"form-container\">\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              placeholder=\"Nome de usuário\"\r\n            />\r\n            <i className=\"bx bxs-user\"></i>\r\n          </div>\r\n\r\n          <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n            {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n          <h2 className='clique'>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n          <h3>Senha Selecionada:</h3>\r\n          <p className='senha-digitada'>{inputSequence.join(' ')}</p>\r\n          <div className=\"clear-button\">\r\n            <button onClick={handleClearInput} className=\"secondary-button\">\r\n              <i className='bx bxs-eraser apagar'></i>\r\n            </button>\r\n          </div>\r\n          <button onClick={handleValidatePassword} className=\"primary-button .validar-senha\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}