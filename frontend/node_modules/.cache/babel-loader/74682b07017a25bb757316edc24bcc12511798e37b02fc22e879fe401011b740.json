{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  const generateUniquePassword = length => {\n    if (length > 10) {\n      throw new Error(\"O comprimento da senha não pode ser maior que 10, pois só há 10 dígitos únicos (0-9).\");\n    }\n    const availableNumbers = [...Array(10).keys()]; // Cria um array [0,1,2,3,4,5,6,7,8,9]\n    const shuffledNumbers = availableNumbers.sort(() => Math.random() - 0.5); // Embaralha os números\n    return shuffledNumbers.slice(0, length); // Retorna a quantidade necessária de números únicos\n  };\n\n  // Gerar senha com números únicos\n  const generatedPassword = generateUniquePassword(10);\n  console.log(\"Senha Gerada:\", generatedPassword);\n\n  // Função para gerar hash para cada número individualmente\n\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0;\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\n    let uniqueNumber = 0;\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n    return uniqueNumber % 10;\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        const generatedPassword = generateUniquePassword(10); // Gera a senha aqui\n        setPassword(generatedPassword);\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence);\n        console.log('Senha Gerada:', generatedPassword);\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões (exibindo números únicos)\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões\n  const generateButtons = sequence => {\n    const uniqueNumbers = [...new Set(sequence)];\n    let allButtons = [];\n    uniqueNumbers.forEach(num => {\n      const shortNumber = hashToNumber(num);\n      const secondShortNumber = hashToNumber(CryptoJS.SHA256((num + 1).toString()).toString(CryptoJS.enc.Base64));\n      allButtons.push({\n        num,\n        shortNumber,\n        secondShortNumber\n      });\n    });\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    allButtons = allButtons.map(button => {\n      button.isClickable = true;\n      return button;\n    });\n    // Embaralha a ordem dos botões (somente os corretos)\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Agora, todos os números são clicáveis, independentemente da posição\n    allButtons = allButtons.map(button => {\n      button.isClickable = true; // Todos os números são clicáveis agora\n      return button;\n    });\n    setButtons(allButtons); // Atualiza os botões no estado\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.num),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.num) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.shortNumber, \" ou \", button.secondShortNumber, \" \"]\n      }, button.num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  // Função para lidar com o clique nos botões\n  // Função para lidar com o clique nos botões\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n\n    // Verifica se o número clicado já foi inserido anteriormente (para evitar repetição)\n    if (inputSequence.includes(pair)) {\n      toast.error('Este número já foi clicado. Tente outro.');\n      return;\n    }\n\n    // Verifica se o próximo número esperado está no par de números curtos, independentemente da posição\n    const isValidFirstNumber = pair === nextExpectedNumber;\n    const isValidSecondNumber = pair === nextExpectedNumber + 1;\n\n    // Se qualquer um dos dois números do par for válido, prossegue\n    if (isValidFirstNumber || isValidSecondNumber) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, pair];\n        console.log('Sequência do usuário após clique:', newSequence);\n\n        // Verifica se a sequência está completa e corresponde à senha\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        return newSequence;\n      });\n    } else {\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 39\n    }, this);\n\n    // Variável para armazenar a senha gerada\n    let generatedPassword = [];\n    password.forEach(pair => {\n      if (!Array.isArray(pair)) {\n        console.error(\"Erro: 'pair' não é um array\", pair);\n        return;\n      }\n      pair.forEach(num => {\n        const shortNumber = hashToNumber(num);\n        generatedPassword.push(shortNumber);\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n\n      // Comparando a sequência do usuário com a senha correta\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","generateUniquePassword","length","Error","availableNumbers","Array","keys","shuffledNumbers","sort","Math","random","slice","generatedPassword","console","log","hashToNumber","input","undefined","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","charCodeAt","handleGenerateSession","data","generateSession","sequence","isArray","session_id","generateButtons","success","formatSequence","formatted","push","uniqueNumbers","Set","allButtons","forEach","num","shortNumber","secondShortNumber","map","button","isClickable","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","handleButtonClick","disabled","style","includes","backgroundColor","pair","flatPassword","flat","nextExpectedNumber","isValidFirstNumber","isValidSecondNumber","prevSequence","newSequence","isCorrect","every","index","setTimeout","displayGeneratedPassword","join","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n\r\n  const generateUniquePassword = (length) => {\r\n    if (length > 10) {\r\n      throw new Error(\"O comprimento da senha não pode ser maior que 10, pois só há 10 dígitos únicos (0-9).\");\r\n    }\r\n  \r\n    const availableNumbers = [...Array(10).keys()]; // Cria um array [0,1,2,3,4,5,6,7,8,9]\r\n    const shuffledNumbers = availableNumbers.sort(() => Math.random() - 0.5); // Embaralha os números\r\n    return shuffledNumbers.slice(0, length); // Retorna a quantidade necessária de números únicos\r\n  };\r\n  \r\n  // Gerar senha com números únicos\r\n  const generatedPassword  = generateUniquePassword(10);\r\n  console.log(\"Senha Gerada:\", generatedPassword );\r\n  \r\n\r\n  // Função para gerar hash para cada número individualmente\r\n  \r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0; \r\n    }\r\n  \r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64);\r\n  \r\n    let uniqueNumber = 0;\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n  \r\n    return uniqueNumber % 10;\r\n  };\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        const generatedPassword = generateUniquePassword(10); // Gera a senha aqui\r\n        setPassword(generatedPassword);\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence);\r\n\r\n        console.log('Senha Gerada:', generatedPassword);\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões (exibindo números únicos)\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n// Função para gerar os botões\r\nconst generateButtons = (sequence) => {\r\n  const uniqueNumbers = [...new Set(sequence)];\r\n  let allButtons = [];\r\n\r\n  uniqueNumbers.forEach((num) => {\r\n    const shortNumber = hashToNumber(num);\r\n    const secondShortNumber = hashToNumber(CryptoJS.SHA256((num + 1).toString()).toString(CryptoJS.enc.Base64));\r\n\r\n    allButtons.push({\r\n      num,\r\n      shortNumber,\r\n      secondShortNumber,\r\n    });\r\n  });\r\n\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n  allButtons = allButtons.map((button) => {\r\n    button.isClickable = true;\r\n    return button;\r\n  });\r\n  // Embaralha a ordem dos botões (somente os corretos)\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Agora, todos os números são clicáveis, independentemente da posição\r\n  allButtons = allButtons.map((button) => {\r\n    button.isClickable = true; // Todos os números são clicáveis agora\r\n    return button;\r\n  });\r\n\r\n  setButtons(allButtons); // Atualiza os botões no estado\r\n};\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n  \r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.num}\r\n            onClick={() => handleButtonClick(button.num)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={\r\n              inputSequence.includes(button.num)\r\n                ? { backgroundColor: 'green' }\r\n                : {}\r\n            }\r\n          >\r\n            {button.shortNumber} ou {button.secondShortNumber} {/* Exibe ambos os números */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n\r\n  // Função para lidar com o clique nos botões\r\n  // Função para lidar com o clique nos botões\r\n// Função para lidar com o clique nos botões\r\n// Função para lidar com o clique nos botões\r\nconst handleButtonClick = (pair) => {\r\n  const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n  const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n  \r\n  // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\r\n  if (nextExpectedNumber === undefined) {\r\n    toast.error('A senha já foi completamente inserida!');\r\n    return;\r\n  }\r\n\r\n  // Verifica se o número clicado já foi inserido anteriormente (para evitar repetição)\r\n  if (inputSequence.includes(pair)) {\r\n    toast.error('Este número já foi clicado. Tente outro.');\r\n    return;\r\n  }\r\n\r\n  // Verifica se o próximo número esperado está no par de números curtos, independentemente da posição\r\n  const isValidFirstNumber = pair === nextExpectedNumber;\r\n  const isValidSecondNumber = pair === nextExpectedNumber + 1;\r\n\r\n  // Se qualquer um dos dois números do par for válido, prossegue\r\n  if (isValidFirstNumber || isValidSecondNumber) {\r\n    setInputSequence((prevSequence) => {\r\n      const newSequence = [...prevSequence, pair];\r\n      console.log('Sequência do usuário após clique:', newSequence);\r\n\r\n      // Verifica se a sequência está completa e corresponde à senha\r\n      if (newSequence.length === flatPassword.length) {\r\n        const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n        if (isCorrect) {\r\n          toast.success('Senha correta! Acesso liberado.');\r\n        } else {\r\n          toast.error('Sequência incorreta. Tente novamente.');\r\n          setIsButtonDisabled(true);\r\n          setTimeout(() => setIsButtonDisabled(false), 2000);\r\n        }\r\n      }\r\n\r\n      return newSequence;\r\n    });\r\n  } else {\r\n    toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n    setIsButtonDisabled(true); // Desabilitar todos os botões após erro\r\n    setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\r\n  }\r\n};\r\n\r\n\r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (password.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    // Variável para armazenar a senha gerada\r\n    let generatedPassword = [];\r\n\r\n    password.forEach(pair => {\r\n      if (!Array.isArray(pair)) {\r\n        console.error(\"Erro: 'pair' não é um array\", pair);\r\n        return;\r\n      }\r\n      \r\n      pair.forEach(num => {\r\n        const shortNumber = hashToNumber(num); \r\n        generatedPassword.push(shortNumber);\r\n      });\r\n    });\r\n    \r\n\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>  {/* Exibe o array plano como uma string */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  \r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      // Comparando a sequência do usuário com a senha correta\r\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}