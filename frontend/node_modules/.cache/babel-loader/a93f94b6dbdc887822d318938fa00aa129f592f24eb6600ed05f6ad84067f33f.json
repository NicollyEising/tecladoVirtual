{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões com misturados\n\n        console.log(\"Token de Verificação:\", data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Função para formatar a sequência sem tentar converter em inteiros\n  const formatSequence = sequence => {\n    console.log(\"Senha do usuário antes do envio:\", sequence);\n\n    // Mapeia os hashes para números ou caracteres amigáveis\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      let hash1 = sequence[i];\n      let hash2 = sequence[i + 1];\n\n      // Usando uma função para mapear o hash para números de 0 a 9, ou letras\n      formatted.push([hashToNumber(hash1), hashToNumber(hash2)]);\n    }\n    return formatted;\n  };\n\n  // Função para mapear hash para número (ou letra)\n  const hashToNumber = hash => {\n    // Aqui você pode gerar uma conversão amigável, como números ou letras\n    const number = parseInt(hash.slice(0, 8), 16) % 10; // Exemplo simples\n    return number;\n  };\n\n  // Função para validar a seleção\n  const isValidSelection = selectedNumber => {\n    const flatPassword = password.flat(); // Aqui \"achata\" a sequência correta da senha\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Verifica o próximo número esperado\n    return selectedNumber === nextExpectedNumber;\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\n    const isValid = pair.includes(nextExpectedNumber); // Verifica se o próximo número esperado está no par\n\n    if (isValid) {\n      // Se for válido, adiciona o número à sequência\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      // Se for inválido, exibe uma mensagem de erro e não faz nada\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Gera botões misturados, incluindo as alternativas corretas\n  const generateButtons = sequence => {\n    let correctPairs = [];\n\n    // Criar pares corretos com opções alternativas\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n\n      // Adiciona cada par como uma opção alternada\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n\n    // Adiciona os pares corretos\n    correctPairs.forEach(pair => {\n      allButtons.push(pair);\n    });\n\n    // Adiciona pares falsos aleatórios\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10); // Número aleatório entre 0-9\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n\n    // Embaralha os pares de botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os botões embaralhados no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair) // Passa o par inteiro para a função de clique\n        ,\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência ao final\n  const handleValidatePassword = async () => {\n    try {\n      console.log(\"Session ID enviado:\", sessionId);\n\n      // Certifique-se de que a sequência está formatada corretamente\n      const formattedSequence = password.flat().map(item => item.toString()); // Garantir que os itens sejam convertidos corretamente\n\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\n      const data = {\n        session_id: sessionId,\n        // sessionId enviado como string\n        sequence: formattedSequence // A sequência correta em formato de string\n      };\n\n      // Enviando os dados para o backend\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleButtonClick(pair),\n          children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QP7fkk/X+Eyp9jbv71tHJv8d/Ls=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","hash1","hash2","push","hashToNumber","hash","number","parseInt","slice","isValidSelection","selectedNumber","flatPassword","flat","nextExpectedNumber","handleButtonClick","pair","isValid","includes","prevSequence","newSequence","correctPairs","num1","num2","allButtons","forEach","Math","floor","random","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","disabled","handleValidatePassword","formattedSequence","item","toString","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","join","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';  // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões com misturados\r\n\r\n        console.log(\"Token de Verificação:\", data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência sem tentar converter em inteiros\r\n  const formatSequence = (sequence) => {\r\n    console.log(\"Senha do usuário antes do envio:\", sequence);\r\n\r\n    // Mapeia os hashes para números ou caracteres amigáveis\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let hash1 = sequence[i];\r\n      let hash2 = sequence[i + 1];\r\n      \r\n      // Usando uma função para mapear o hash para números de 0 a 9, ou letras\r\n      formatted.push([hashToNumber(hash1), hashToNumber(hash2)]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para mapear hash para número (ou letra)\r\n  const hashToNumber = (hash) => {\r\n    // Aqui você pode gerar uma conversão amigável, como números ou letras\r\n    const number = parseInt(hash.slice(0, 8), 16) % 10;  // Exemplo simples\r\n    return number;\r\n  };\r\n\r\n  // Função para validar a seleção\r\n  const isValidSelection = (selectedNumber) => {\r\n    const flatPassword = password.flat();  // Aqui \"achata\" a sequência correta da senha\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];  // Verifica o próximo número esperado\r\n    return selectedNumber === nextExpectedNumber;\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n    \r\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\r\n    const isValid = pair.includes(nextExpectedNumber); // Verifica se o próximo número esperado está no par\r\n\r\n    if (isValid) {\r\n      // Se for válido, adiciona o número à sequência\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log(\"Sequência do usuário após clique:\", newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      // Se for inválido, exibe uma mensagem de erro e não faz nada\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n\r\n  // Gera botões misturados, incluindo as alternativas corretas\r\n  const generateButtons = (sequence) => {\r\n    let correctPairs = [];\r\n    \r\n    // Criar pares corretos com opções alternativas\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let num1 = sequence[i];\r\n      let num2 = sequence[i + 1];\r\n      \r\n      // Adiciona cada par como uma opção alternada\r\n      correctPairs.push([num1, num2]);\r\n    }\r\n\r\n    let allButtons = [];\r\n    \r\n    // Adiciona os pares corretos\r\n    correctPairs.forEach(pair => {\r\n      allButtons.push(pair);\r\n    });\r\n\r\n    // Adiciona pares falsos aleatórios\r\n    for (let i = 0; i < correctPairs.length; i++) {\r\n      let num1 = Math.floor(Math.random() * 10);  // Número aleatório entre 0-9\r\n      let num2 = Math.floor(Math.random() * 10);\r\n      allButtons.push([num1, num2]);\r\n    }\r\n\r\n    // Embaralha os pares de botões\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n    // Define os botões embaralhados no estado\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}  // Passa o par inteiro para a função de clique\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência ao final\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log(\"Session ID enviado:\", sessionId);\r\n\r\n      // Certifique-se de que a sequência está formatada corretamente\r\n      const formattedSequence = password.flat().map(item => item.toString());  // Garantir que os itens sejam convertidos corretamente\r\n\r\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\r\n\r\n      const data = {\r\n        session_id: sessionId, // sessionId enviado como string\r\n        sequence: formattedSequence // A sequência correta em formato de string\r\n      };\r\n\r\n      // Enviando os dados para o backend\r\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession}>Gerar Nova Sessão</button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          <p>{password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}</p>\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons\">\r\n            {buttons.map((pair, index) => (\r\n              <button key={index} onClick={() => handleButtonClick(pair)}>\r\n                [{pair[0]} ou {pair[1]}]\r\n              </button>\r\n            ))}\r\n          </div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n          <div>\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}