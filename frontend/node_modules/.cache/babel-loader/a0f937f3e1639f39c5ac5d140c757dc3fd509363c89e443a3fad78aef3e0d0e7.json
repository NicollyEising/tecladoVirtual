{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para gerar hash para cada número individualmente\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\n    let uniqueNumber = 0;\n\n    // Soma os códigos dos caracteres do hash\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n\n    // Garante que o número gerado esteja no intervalo de 1 a 9\n    const mappedNumber = uniqueNumber % 9 + 1;\n    return mappedNumber;\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  const generateButtons = sequence => {\n    const uniqueNumbers = [...new Set(sequence)]; // Usa o Set para garantir números únicos\n\n    let allButtons = [];\n    let usedNumbers = new Set(); // Para garantir que não haja números repetidos\n\n    uniqueNumbers.forEach(num => {\n      const shortNumber = hashToNumber(num); // Gera o número curto a partir do hash do número\n\n      // Garantir que o número não se repita\n      let secondShortNumber = hashToNumber(num + 'salt'); // Gera um hash real para o segundo número, com salt\n      while (usedNumbers.has(secondShortNumber)) {\n        secondShortNumber = hashToNumber(num + 'salt' + Math.random().toString()); // Gera um novo número até ser único\n      }\n\n      // Marcar os números como usados\n      usedNumbers.add(shortNumber);\n      usedNumbers.add(secondShortNumber);\n      allButtons.push({\n        num,\n        shortNumber,\n        secondShortNumber // Adiciona o segundo número curto como hash\n      });\n      console.log(`Gerando botão: ${num}, shortNumber: ${shortNumber}, secondShortNumber: ${secondShortNumber}`); // Log para depuração\n    });\n\n    // Embaralha a ordem dos botões (somente os corretos)\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Agora, todos os números são clicáveis, independentemente da posição\n    allButtons = allButtons.map(button => {\n      button.isClickable = true; // Todos os números são clicáveis agora\n      return button;\n    });\n    setButtons(allButtons); // Atualiza os botões no estado\n  };\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.num),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.num) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.secondShortNumber, \" ou \", button.shortNumber, \" \"]\n      }, button.num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n\n    // Verifica se ambos os números do par são válidos em relação à sequência\n    const isValidFirstNumber = pair === nextExpectedNumber;\n    const isValidSecondNumber = pair === nextExpectedNumber + 1;\n\n    // Se qualquer um dos dois números do par for válido, prossegue\n    if (isValidFirstNumber || isValidSecondNumber) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, pair];\n        console.log('Sequência do usuário após clique:', newSequence);\n\n        // Verifica se a sequência está completa e corresponde à senha\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        return newSequence;\n      });\n    } else {\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 39\n    }, this);\n    let generatedPassword = [];\n    password.forEach(pair => {\n      pair.forEach(num => {\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\n        generatedPassword.push(shortNumber);\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n\n      // Comparando a sequência do usuário com a senha correta\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","mappedNumber","handleGenerateSession","data","generateSession","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","push","uniqueNumbers","Set","allButtons","usedNumbers","forEach","num","shortNumber","secondShortNumber","has","Math","random","add","sort","map","button","isClickable","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","handleButtonClick","disabled","style","includes","backgroundColor","pair","flatPassword","flat","nextExpectedNumber","isValidFirstNumber","isValidSecondNumber","prevSequence","newSequence","isCorrect","every","index","setTimeout","displayGeneratedPassword","generatedPassword","join","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para gerar hash para cada número individualmente\r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\r\n    }\r\n  \r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\r\n    let uniqueNumber = 0;\r\n    \r\n    // Soma os códigos dos caracteres do hash\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n  \r\n    // Garante que o número gerado esteja no intervalo de 1 a 9\r\n    const mappedNumber = (uniqueNumber % 9) + 1;\r\n  \r\n    return mappedNumber;\r\n  };\r\n\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Ativa o loading\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\nconst generateButtons = (sequence) => {\r\n  const uniqueNumbers = [...new Set(sequence)]; // Usa o Set para garantir números únicos\r\n\r\n  let allButtons = [];\r\n  let usedNumbers = new Set(); // Para garantir que não haja números repetidos\r\n\r\n  uniqueNumbers.forEach((num) => {\r\n    const shortNumber = hashToNumber(num); // Gera o número curto a partir do hash do número\r\n    \r\n    // Garantir que o número não se repita\r\n    let secondShortNumber = hashToNumber(num + 'salt'); // Gera um hash real para o segundo número, com salt\r\n    while (usedNumbers.has(secondShortNumber)) {\r\n      secondShortNumber = hashToNumber(num + 'salt' + Math.random().toString()); // Gera um novo número até ser único\r\n    }\r\n\r\n    // Marcar os números como usados\r\n    usedNumbers.add(shortNumber);\r\n    usedNumbers.add(secondShortNumber);\r\n\r\n    allButtons.push({\r\n      num,\r\n      shortNumber,\r\n      secondShortNumber, // Adiciona o segundo número curto como hash\r\n    });\r\n\r\n    console.log(`Gerando botão: ${num}, shortNumber: ${shortNumber}, secondShortNumber: ${secondShortNumber}`); // Log para depuração\r\n  });\r\n\r\n  // Embaralha a ordem dos botões (somente os corretos)\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Agora, todos os números são clicáveis, independentemente da posição\r\n  allButtons = allButtons.map((button) => {\r\n    button.isClickable = true; // Todos os números são clicáveis agora\r\n    return button;\r\n  });\r\n\r\n  setButtons(allButtons); // Atualiza os botões no estado\r\n};\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.num}\r\n            onClick={() => handleButtonClick(button.num)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={inputSequence.includes(button.num) ? { backgroundColor: 'green' } : {}}\r\n          >\r\n            {button.secondShortNumber} ou {button.shortNumber} {/* Exibe ambos os números */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\r\n    if (nextExpectedNumber === undefined) {\r\n      toast.error('A senha já foi completamente inserida!');\r\n      return;\r\n    }\r\n\r\n    // Verifica se ambos os números do par são válidos em relação à sequência\r\n    const isValidFirstNumber = pair === nextExpectedNumber;\r\n    const isValidSecondNumber = pair === nextExpectedNumber + 1;\r\n\r\n    // Se qualquer um dos dois números do par for válido, prossegue\r\n    if (isValidFirstNumber || isValidSecondNumber) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, pair];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n\r\n        // Verifica se a sequência está completa e corresponde à senha\r\n        if (newSequence.length === flatPassword.length) {\r\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n          if (isCorrect) {\r\n            toast.success('Senha correta! Acesso liberado.');\r\n          } else {\r\n            toast.error('Sequência incorreta. Tente novamente.');\r\n            setIsButtonDisabled(true);\r\n            setTimeout(() => setIsButtonDisabled(false), 2000);\r\n          }\r\n        }\r\n\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\r\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\r\n    }\r\n  };\r\n\r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (password.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    let generatedPassword = [];\r\n    password.forEach(pair => {\r\n      pair.forEach(num => {\r\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\r\n        generatedPassword.push(shortNumber);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>  {/* Exibe o array plano como uma string */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      // Comparando a sequência do usuário com a senha correta\r\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}