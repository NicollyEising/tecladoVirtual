{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [buttons, setButtons] = useState([]);\n  const [token, setToken] = useState('');\n  const [inputSequence, setInputSequence] = useState([]);\n  const generateSession = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/generate_session');\n      console.log('Dados da sessão gerada:', response.data);\n      setSessionId(response.data.session_id);\n      setButtons(response.data.sequence);\n      setToken(response.data.token);\n      setInputSequence([]); // Limpar a sequência ao gerar nova sessão\n    } catch (error) {\n      console.error('Erro ao gerar sessão:', error);\n      alert('Erro ao gerar sessão. Verifique a conexão com o servidor.');\n    }\n  };\n  const handleButtonClick = pair => {\n    // Captura os dois números do par, mas adiciona apenas o número da vez\n    setInputSequence(prevSequence => {\n      const newSequence = [...prevSequence, pair[0], pair[1]]; // Adiciona ambos os números do par\n      console.log('Sequência de entrada atualizada:', newSequence);\n      return newSequence;\n    });\n  };\n  const validateSequence = async () => {\n    if (!sessionId || inputSequence.length === 0) {\n      alert('Sessão inválida ou sequência vazia.');\n      return;\n    }\n    const senhaCorreta = [1, 2, 3, 4, 5]; // Senha esperada\n    let sequenceToSend = []; // Array para armazenar os números válidos\n\n    console.log('Sequência de entrada antes da validação:', inputSequence);\n\n    // Remover duplicatas da sequência de entrada\n    const uniqueInputSequence = [...new Set(inputSequence)];\n    let inputIndex = 0;\n    let buttonMatched = false;\n    // Loop para verificar cada número da sequência de entrada\n    for (let i = 0; i < senhaCorreta.length; i++) {\n      // Obter o par de botões para a posição i\n      const pair = buttons[i];\n      if (uniqueInputSequence.includes(senhaCorreta[i])) {\n        // Se o número corresponde ao número correto da senha\n        if (senhaCorreta[i] === pair[0] || senhaCorreta[i] === pair[1]) {\n          sequenceToSend.push(senhaCorreta[i]); // Adiciona à sequência final\n          inputIndex++;\n          buttonMatched = true;\n        }\n      }\n\n      // Caso o número da sequência não corresponda ao botão, interrompe a validação\n      if (!buttonMatched) {\n        alert('Sequência inválida! Não corresponde à senha esperada.');\n        return;\n      }\n    }\n    console.log('Sequência final a ser enviada para o banco de dados:', sequenceToSend);\n\n    // Se a sequência gerada estiver correta, envia para o servidor\n    if (sequenceToSend.length === senhaCorreta.length) {\n      console.log('Dados enviados para validação:', {\n        session_id: sessionId,\n        sequence: sequenceToSend\n      });\n      try {\n        const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n          session_id: sessionId,\n          sequence: sequenceToSend\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Resposta da validação:', response.data);\n        alert(response.data.message);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        console.error('Erro na validação:', error);\n        alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Erro na validação da sequência.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateSession,\n      children: \"Gerar Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair),\n        children: [\"[\", pair[0], \", \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateSequence,\n      children: \"Validar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hIMAapF1uSBoHMSL1gneI9ChiiU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","sessionId","setSessionId","buttons","setButtons","token","setToken","inputSequence","setInputSequence","generateSession","response","post","console","log","data","session_id","sequence","error","alert","handleButtonClick","pair","prevSequence","newSequence","validateSequence","length","senhaCorreta","sequenceToSend","uniqueInputSequence","Set","inputIndex","buttonMatched","i","includes","push","headers","Authorization","message","_error$response","_error$response$data","detail","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react'; \r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [buttons, setButtons] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n\r\n  const generateSession = async () => {\r\n    try {\r\n      const response = await axios.post('http://127.0.0.1:8000/generate_session');\r\n      console.log('Dados da sessão gerada:', response.data);\r\n      setSessionId(response.data.session_id);\r\n      setButtons(response.data.sequence);\r\n      setToken(response.data.token);\r\n      setInputSequence([]); // Limpar a sequência ao gerar nova sessão\r\n    } catch (error) {\r\n      console.error('Erro ao gerar sessão:', error);\r\n      alert('Erro ao gerar sessão. Verifique a conexão com o servidor.');\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (pair) => {\r\n    // Captura os dois números do par, mas adiciona apenas o número da vez\r\n    setInputSequence((prevSequence) => {\r\n      const newSequence = [...prevSequence, pair[0], pair[1]]; // Adiciona ambos os números do par\r\n      console.log('Sequência de entrada atualizada:', newSequence);\r\n      return newSequence;\r\n    });\r\n  };\r\n\r\n  const validateSequence = async () => {\r\n    if (!sessionId || inputSequence.length === 0) {\r\n      alert('Sessão inválida ou sequência vazia.');\r\n      return;\r\n    }\r\n\r\n    const senhaCorreta = [1, 2, 3, 4, 5]; // Senha esperada\r\n    let sequenceToSend = []; // Array para armazenar os números válidos\r\n\r\n    console.log('Sequência de entrada antes da validação:', inputSequence);\r\n\r\n    // Remover duplicatas da sequência de entrada\r\n    const uniqueInputSequence = [...new Set(inputSequence)];\r\n\r\n    let inputIndex = 0;\r\n    let buttonMatched = false;\r\n    // Loop para verificar cada número da sequência de entrada\r\n    for (let i = 0; i < senhaCorreta.length; i++) {\r\n      // Obter o par de botões para a posição i\r\n      const pair = buttons[i];\r\n\r\n      if (uniqueInputSequence.includes(senhaCorreta[i])) {\r\n        // Se o número corresponde ao número correto da senha\r\n        if (senhaCorreta[i] === pair[0] || senhaCorreta[i] === pair[1]) {\r\n          sequenceToSend.push(senhaCorreta[i]); // Adiciona à sequência final\r\n          inputIndex++;\r\n          buttonMatched = true;\r\n        }\r\n      }\r\n\r\n      // Caso o número da sequência não corresponda ao botão, interrompe a validação\r\n      if (!buttonMatched) {\r\n        alert('Sequência inválida! Não corresponde à senha esperada.');\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.log('Sequência final a ser enviada para o banco de dados:', sequenceToSend);\r\n\r\n    // Se a sequência gerada estiver correta, envia para o servidor\r\n    if (sequenceToSend.length === senhaCorreta.length) {\r\n      console.log('Dados enviados para validação:', { session_id: sessionId, sequence: sequenceToSend });\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          'http://127.0.0.1:8000/validate_sequence',\r\n          { session_id: sessionId, sequence: sequenceToSend },\r\n          { headers: { Authorization: `Bearer ${token}` } }\r\n        );\r\n        console.log('Resposta da validação:', response.data);\r\n        alert(response.data.message);\r\n      } catch (error) {\r\n        console.error('Erro na validação:', error);\r\n        alert(error.response?.data?.detail || 'Erro na validação da sequência.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={generateSession}>Gerar Sessão</button>\r\n      <div>\r\n        {buttons.map((pair, index) => (\r\n          <button key={index} onClick={() => handleButtonClick(pair)}>\r\n            [{pair[0]}, {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <button onClick={validateSequence}>Validar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,wCAAwC,CAAC;MAC3EC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,QAAQ,CAACI,IAAI,CAAC;MACrDZ,YAAY,CAACQ,QAAQ,CAACI,IAAI,CAACC,UAAU,CAAC;MACtCX,UAAU,CAACM,QAAQ,CAACI,IAAI,CAACE,QAAQ,CAAC;MAClCV,QAAQ,CAACI,QAAQ,CAACI,IAAI,CAACT,KAAK,CAAC;MAC7BG,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,KAAK,CAAC,2DAA2D,CAAC;IACpE;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;IAClC;IACAZ,gBAAgB,CAAEa,YAAY,IAAK;MACjC,MAAMC,WAAW,GAAG,CAAC,GAAGD,YAAY,EAAED,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzDR,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAES,WAAW,CAAC;MAC5D,OAAOA,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI,CAACtB,SAAS,IAAIM,aAAa,CAACiB,MAAM,KAAK,CAAC,EAAE;MAC5CN,KAAK,CAAC,qCAAqC,CAAC;MAC5C;IACF;IAEA,MAAMO,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACtC,IAAIC,cAAc,GAAG,EAAE,CAAC,CAAC;;IAEzBd,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEN,aAAa,CAAC;;IAEtE;IACA,MAAMoB,mBAAmB,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACrB,aAAa,CAAC,CAAC;IAEvD,IAAIsB,UAAU,GAAG,CAAC;IAClB,IAAIC,aAAa,GAAG,KAAK;IACzB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACD,MAAM,EAAEO,CAAC,EAAE,EAAE;MAC5C;MACA,MAAMX,IAAI,GAAGjB,OAAO,CAAC4B,CAAC,CAAC;MAEvB,IAAIJ,mBAAmB,CAACK,QAAQ,CAACP,YAAY,CAACM,CAAC,CAAC,CAAC,EAAE;QACjD;QACA,IAAIN,YAAY,CAACM,CAAC,CAAC,KAAKX,IAAI,CAAC,CAAC,CAAC,IAAIK,YAAY,CAACM,CAAC,CAAC,KAAKX,IAAI,CAAC,CAAC,CAAC,EAAE;UAC9DM,cAAc,CAACO,IAAI,CAACR,YAAY,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;UACtCF,UAAU,EAAE;UACZC,aAAa,GAAG,IAAI;QACtB;MACF;;MAEA;MACA,IAAI,CAACA,aAAa,EAAE;QAClBZ,KAAK,CAAC,uDAAuD,CAAC;QAC9D;MACF;IACF;IAEAN,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEa,cAAc,CAAC;;IAEnF;IACA,IAAIA,cAAc,CAACF,MAAM,KAAKC,YAAY,CAACD,MAAM,EAAE;MACjDZ,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;QAAEE,UAAU,EAAEd,SAAS;QAAEe,QAAQ,EAAEU;MAAe,CAAC,CAAC;MAElG,IAAI;QACF,MAAMhB,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAC/B,yCAAyC,EACzC;UAAEI,UAAU,EAAEd,SAAS;UAAEe,QAAQ,EAAEU;QAAe,CAAC,EACnD;UAAEQ,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAU9B,KAAK;UAAG;QAAE,CAClD,CAAC;QACDO,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,QAAQ,CAACI,IAAI,CAAC;QACpDI,KAAK,CAACR,QAAQ,CAACI,IAAI,CAACsB,OAAO,CAAC;MAC9B,CAAC,CAAC,OAAOnB,KAAK,EAAE;QAAA,IAAAoB,eAAA,EAAAC,oBAAA;QACd1B,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CC,KAAK,CAAC,EAAAmB,eAAA,GAAApB,KAAK,CAACP,QAAQ,cAAA2B,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBvB,IAAI,cAAAwB,oBAAA,uBAApBA,oBAAA,CAAsBC,MAAM,KAAI,iCAAiC,CAAC;MAC1E;IACF;EACF,CAAC;EAED,oBACEzC,OAAA;IAAA0C,QAAA,gBACE1C,OAAA;MAAQ2C,OAAO,EAAEhC,eAAgB;MAAA+B,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACvD/C,OAAA;MAAA0C,QAAA,EACGrC,OAAO,CAAC2C,GAAG,CAAC,CAAC1B,IAAI,EAAE2B,KAAK,kBACvBjD,OAAA;QAAoB2C,OAAO,EAAEA,CAAA,KAAMtB,iBAAiB,CAACC,IAAI,CAAE;QAAAoB,QAAA,GAAC,GACzD,EAACpB,IAAI,CAAC,CAAC,CAAC,EAAC,IAAE,EAACA,IAAI,CAAC,CAAC,CAAC,EAAC,GACvB;MAAA,GAFa2B,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN/C,OAAA;MAAQ2C,OAAO,EAAElB,gBAAiB;MAAAiB,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV;AAAC7C,EAAA,CApGQD,GAAG;AAAAiD,EAAA,GAAHjD,GAAG;AAsGZ,eAAeA,GAAG;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}