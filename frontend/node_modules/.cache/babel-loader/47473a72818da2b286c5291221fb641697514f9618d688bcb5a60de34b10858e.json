{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]); // Senha real (hashes)\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [mappedPairs, setMappedPairs] = useState({}); // Mapeamento de hash -> número visível\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setToken(data.token);\n        setIsSessionValid(true);\n        const formattedPassword = formatSequence(data.sequence);\n        setPassword(formattedPassword);\n\n        // Criar um mapeamento hash -> número visível\n        const map = {};\n        formattedPassword.forEach((pair, index) => {\n          map[pair.join('-')] = index + 1; // Exemplo: { \"hash1-hash2\": 1, \"hash3-hash4\": 2 }\n        });\n        setMappedPairs(map);\n        generateButtons(formattedPassword, map);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar botões misturados\n  const generateButtons = (formattedPassword, map) => {\n    let allButtons = [];\n\n    // Criar botões reais mapeados\n    formattedPassword.forEach(pair => {\n      allButtons.push({\n        pair,\n        label: `[${map[pair.join('-')]}]`\n      });\n    });\n\n    // Adicionar botões falsos (pares aleatórios)\n    for (let i = 0; i < formattedPassword.length; i++) {\n      let randomNum1 = Math.floor(Math.random() * 10) + formattedPassword.length + 1;\n      let randomNum2 = Math.floor(Math.random() * 10) + formattedPassword.length + 1;\n      allButtons.push({\n        pair: [\"fake\", \"fake\"],\n        label: `[${randomNum1},${randomNum2}]`\n      });\n    }\n\n    // Embaralhar botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.pair),\n        className: \"button\",\n        style: inputSequence.includes(button.label) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: button.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const pairKey = pair.join('-');\n    const expectedPair = password[inputSequence.length];\n    const expectedKey = expectedPair.join('-');\n    if (pairKey === expectedKey) {\n      setInputSequence(prevSequence => [...prevSequence, `[${mappedPairs[pairKey]}]`]);\n    } else {\n      toast.error('Par incorreto. Tente novamente.');\n    }\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      const formattedSequence = password.flat().map(item => item.toString());\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografar sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId\n        }\n      });\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: password.map(pair => `[${mappedPairs[pair.join('-')]}]`).join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Ln9BsM/ens/LUmVU/dsSZkiyNWk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isLoading","setIsLoading","buttons","setButtons","mappedPairs","setMappedPairs","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formattedPassword","formatSequence","map","forEach","pair","index","join","generateButtons","success","formatted","i","length","push","allButtons","label","randomNum1","Math","floor","random","randomNum2","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","button","onClick","handleButtonClick","style","includes","backgroundColor","pairKey","expectedPair","expectedKey","prevSequence","handleValidatePassword","formattedSequence","flat","item","toString","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","htmlFor","id","type","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]); // Senha real (hashes)\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [mappedPairs, setMappedPairs] = useState({}); // Mapeamento de hash -> número visível\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n\r\n        const formattedPassword = formatSequence(data.sequence);\r\n        setPassword(formattedPassword);\r\n\r\n        // Criar um mapeamento hash -> número visível\r\n        const map = {};\r\n        formattedPassword.forEach((pair, index) => {\r\n          map[pair.join('-')] = index + 1; // Exemplo: { \"hash1-hash2\": 1, \"hash3-hash4\": 2 }\r\n        });\r\n        setMappedPairs(map);\r\n\r\n        generateButtons(formattedPassword, map);\r\n\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar botões misturados\r\n  const generateButtons = (formattedPassword, map) => {\r\n    let allButtons = [];\r\n\r\n    // Criar botões reais mapeados\r\n    formattedPassword.forEach(pair => {\r\n      allButtons.push({ pair, label: `[${map[pair.join('-')]}]` });\r\n    });\r\n\r\n    // Adicionar botões falsos (pares aleatórios)\r\n    for (let i = 0; i < formattedPassword.length; i++) {\r\n      let randomNum1 = Math.floor(Math.random() * 10) + formattedPassword.length + 1;\r\n      let randomNum2 = Math.floor(Math.random() * 10) + formattedPassword.length + 1;\r\n      allButtons.push({ pair: [\"fake\", \"fake\"], label: `[${randomNum1},${randomNum2}]` });\r\n    }\r\n\r\n    // Embaralhar botões\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(button.pair)}\r\n            className=\"button\"\r\n            style={inputSequence.includes(button.label) ? { backgroundColor: 'green' } : {}}\r\n          >\r\n            {button.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const pairKey = pair.join('-');\r\n    const expectedPair = password[inputSequence.length];\r\n    const expectedKey = expectedPair.join('-');\r\n\r\n    if (pairKey === expectedKey) {\r\n      setInputSequence((prevSequence) => [...prevSequence, `[${mappedPairs[pairKey]}]`]);\r\n    } else {\r\n      toast.error('Par incorreto. Tente novamente.');\r\n    }\r\n  };\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      const formattedSequence = password.flat().map(item => item.toString());\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence\r\n      };\r\n\r\n      // Criptografar sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post(\"http://127.0.0.1:8000/validate_sequence\", data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId\r\n        }\r\n      });\r\n\r\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          <p>{password.map(pair => `[${mappedPairs[pair.join('-')]}]`).join(' ')}</p>\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">\r\n            {displayButtons()}\r\n          </div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}