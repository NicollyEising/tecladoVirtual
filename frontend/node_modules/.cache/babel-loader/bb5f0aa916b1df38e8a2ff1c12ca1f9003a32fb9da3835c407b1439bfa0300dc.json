{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importando o crypto-js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [secretKey, setSecretKey] = useState('');\n  useEffect(() => {\n    const key = generateFernetKey();\n    setSecretKey(key);\n    console.log('Generated Secret Key:', key);\n  }, []);\n\n  // Função para gerar nova sessão\n  const generateFernetKey = () => {\n    const randomWords = CryptoJS.lib.WordArray.random(32); // Gerar 32 bytes aleatórios\n    const base64Key = randomWords.toString(CryptoJS.enc.Base64); // Codificar como Base64\n    return base64Key;\n  };\n  const encryptSequence = (sequence, secretKey) => {\n    // Se for usar AES, ou substitua por Fernet no backend para manter compatibilidade\n    const sequenceStr = JSON.stringify(sequence);\n    const encryptedSequence = CryptoJS.AES.encrypt(sequenceStr, secretKey).toString();\n    return encryptedSequence;\n  };\n  const hashSequence = sequence => {\n    // Converter a sequência para uma string JSON\n    const sequenceStr = JSON.stringify(sequence);\n\n    // Gerar o hash SHA256 da sequência e converter para hexadecimal\n    const hashedSequence = CryptoJS.SHA256(sequenceStr).toString(CryptoJS.enc.Hex);\n    return hashedSequence;\n  };\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log(\"Token de Verificação:\", data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Formata a sequência correta em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para validar a seleção\n  const isValidSelection = selectedNumber => {\n    const flatPassword = password.flat();\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    return selectedNumber === nextExpectedNumber;\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat();\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    const isValid = pair.includes(nextExpectedNumber);\n    if (isValid) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Gera botões misturados, incluindo as alternativas corretas\n  const generateButtons = sequence => {\n    let correctPairs = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [...correctPairs];\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10);\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair),\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência ao final\n  const handleValidatePassword = async () => {\n    try {\n      // Verificar se a sequência selecionada está correta antes de gerar o hash\n      const isSequenceCorrect = inputSequence.every((num, index) => {\n        return num === password[index][0] || num === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        console.log(\"Sequência incorreta\");\n        toast.error('Sequência incorreta');\n        return;\n      }\n      const hashedSequence = hashSequence(inputSequence);\n      console.log(\"Hash gerado:\", hashedSequence);\n\n      // Enviar a sequência com o hash para o backend\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n        session_id: sessionId,\n        hashed_sequence: hashedSequence\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"Resposta da API:\", response.data);\n      if (response.data && response.data.success) {\n        toast.success('Sequência validada com sucesso!');\n      } else {\n        console.log(\"Erro na validação\");\n        toast.error('Erro ao validar a sequência');\n      }\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Erro ao validar a sequência:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), displayPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), displayButtons(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ') || \"Nenhuma sequência selecionada ainda...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCzXbfejGWpjXjf0srlOo8pneb8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","secretKey","setSecretKey","key","generateFernetKey","console","log","randomWords","lib","WordArray","random","base64Key","toString","enc","Base64","encryptSequence","sequence","sequenceStr","JSON","stringify","encryptedSequence","AES","encrypt","hashSequence","hashedSequence","SHA256","Hex","handleGenerateSession","error","data","generateSession","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","isValidSelection","selectedNumber","flatPassword","flat","nextExpectedNumber","handleButtonClick","pair","isValid","includes","prevSequence","newSequence","correctPairs","num1","num2","allButtons","Math","floor","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","disabled","handleValidatePassword","isSequenceCorrect","every","num","response","post","hashed_sequence","headers","Authorization","message","displayPassword","join","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importando o crypto-js\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [secretKey, setSecretKey] = useState('');\r\n\r\n  useEffect(() => {\r\n    const key = generateFernetKey();\r\n    setSecretKey(key);\r\n    console.log('Generated Secret Key:', key);\r\n  }, []);\r\n\r\n  // Função para gerar nova sessão\r\n  const generateFernetKey = () => {\r\n    const randomWords = CryptoJS.lib.WordArray.random(32); // Gerar 32 bytes aleatórios\r\n    const base64Key = randomWords.toString(CryptoJS.enc.Base64); // Codificar como Base64\r\n    return base64Key;\r\n  };\r\n\r\n  const encryptSequence = (sequence, secretKey) => {\r\n    // Se for usar AES, ou substitua por Fernet no backend para manter compatibilidade\r\n    const sequenceStr = JSON.stringify(sequence);\r\n    const encryptedSequence = CryptoJS.AES.encrypt(sequenceStr, secretKey).toString();\r\n    return encryptedSequence;\r\n  };\r\n\r\n  const hashSequence = (sequence) => {\r\n    // Converter a sequência para uma string JSON\r\n    const sequenceStr = JSON.stringify(sequence);\r\n    \r\n    // Gerar o hash SHA256 da sequência e converter para hexadecimal\r\n    const hashedSequence = CryptoJS.SHA256(sequenceStr).toString(CryptoJS.enc.Hex);\r\n    \r\n    return hashedSequence;\r\n  };\r\n  \r\n  \r\n\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log(\"Token de Verificação:\", data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Formata a sequência correta em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para validar a seleção\r\n  const isValidSelection = (selectedNumber) => {\r\n    const flatPassword = password.flat();\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n    return selectedNumber === nextExpectedNumber;\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat();\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n    const isValid = pair.includes(nextExpectedNumber);\r\n\r\n    if (isValid) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log(\"Sequência do usuário após clique:\", newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n\r\n  // Gera botões misturados, incluindo as alternativas corretas\r\n  const generateButtons = (sequence) => {\r\n    let correctPairs = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let num1 = sequence[i];\r\n      let num2 = sequence[i + 1];\r\n      correctPairs.push([num1, num2]);\r\n    }\r\n\r\n    let allButtons = [...correctPairs];\r\n\r\n    for (let i = 0; i < correctPairs.length; i++) {\r\n      let num1 = Math.floor(Math.random() * 10);\r\n      let num2 = Math.floor(Math.random() * 10);\r\n      allButtons.push([num1, num2]);\r\n    }\r\n\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência ao final\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      // Verificar se a sequência selecionada está correta antes de gerar o hash\r\n      const isSequenceCorrect = inputSequence.every((num, index) => {\r\n        return num === password[index][0] || num === password[index][1];\r\n      });\r\n  \r\n      if (!isSequenceCorrect) {\r\n        console.log(\"Sequência incorreta\");\r\n        toast.error('Sequência incorreta');\r\n        return;\r\n      }\r\n  \r\n      const hashedSequence = hashSequence(inputSequence);\r\n      console.log(\"Hash gerado:\", hashedSequence);\r\n  \r\n      // Enviar a sequência com o hash para o backend\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\r\n        session_id: sessionId,\r\n        hashed_sequence: hashedSequence,\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      console.log(\"Resposta da API:\", response.data);\r\n      if (response.data && response.data.success) {\r\n        toast.success('Sequência validada com sucesso!');\r\n      } else {\r\n        console.log(\"Erro na validação\");\r\n        toast.error('Erro ao validar a sequência');\r\n      }\r\n  \r\n      setIsSessionValid(false);\r\n      setIsButtonDisabled(true);\r\n    } catch (error) {\r\n      console.log('Erro ao validar a sequência:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n  \r\n  \r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession}>Gerar Nova Sessão</button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          {displayPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          {displayButtons()}\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ') || \"Nenhuma sequência selecionada ainda...\"}</p>\r\n\r\n          <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n          <div>\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}