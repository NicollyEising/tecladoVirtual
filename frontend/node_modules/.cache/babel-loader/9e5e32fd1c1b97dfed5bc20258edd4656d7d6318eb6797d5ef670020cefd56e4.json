{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para gerar hash para cada número individualmente\n  const hashToNumber = input => {\n    // Gera o hash SHA-256 do número\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n\n    // Usa mais caracteres do hash para melhorar a dispersão\n    const hashNumber = parseInt(hash.slice(0, 16), 16); // Usa 16 caracteres agora\n\n    // Garante que o número gerado seja entre 0 e 9\n    return hashNumber % 10;\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        const uniquePassword = generateUniquePassword(data.sequence); // Usando a senha sem repetição\n        setPassword(uniquePassword); // Guardando a senha única\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(uniquePassword); // Gera botões com a senha única\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões (exibindo números únicos)\n  // Função para gerar os botões com os números da senha sem repetições\n  const generateButtons = sequence => {\n    // Filtra apenas os números únicos da senha\n    const uniqueNumbers = Array.from(new Set(sequence));\n    let allButtons = [];\n\n    // Gera os botões para os números únicos da senha\n    uniqueNumbers.forEach(num => {\n      const shortNumber = hashToNumber(num); // Gera o número curto a partir do hash do número\n      allButtons.push({\n        num,\n        shortNumber\n      });\n    });\n\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons); // Atualiza os botões no estado\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.num),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.num) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.shortNumber, \" \"]\n      }, button.num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = num => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n\n    // Verifica se o próximo número esperado está no par, independentemente da posição\n    const isValid = num === nextExpectedNumber;\n    if (isValid) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log('Sequência do usuário após clique:', newSequence);\n\n        // Verifica se a sequência está completa e corresponde à senha\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        return newSequence;\n      });\n    } else {\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 39\n    }, this);\n\n    // Variável para armazenar a senha gerada\n    let generatedPassword = [];\n\n    // Iterando sobre o array de 'password' e gerando os números curtos\n    password.forEach(pair => {\n      pair.forEach(num => {\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\n        generatedPassword.push(shortNumber);\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  };\n  const generateUniquePassword = sequence => {\n    // Filtra a sequência para remover números repetidos\n    const uniqueSequence = Array.from(new Set(sequence));\n\n    // Formata a sequência em pares\n    return formatSequence(uniqueSequence); // Supondo que a função formatSequence já exista\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n\n      // Comparando a sequência do usuário com a senha correta\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","hash","SHA256","toString","hashNumber","parseInt","slice","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","uniquePassword","generateUniquePassword","generateButtons","success","formatSequence","formatted","i","length","push","uniqueNumbers","from","Set","allButtons","forEach","num","shortNumber","sort","Math","random","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","style","includes","backgroundColor","flatPassword","flat","nextExpectedNumber","undefined","isValid","prevSequence","newSequence","isCorrect","every","index","setTimeout","displayGeneratedPassword","generatedPassword","pair","join","uniqueSequence","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para gerar hash para cada número individualmente\r\nconst hashToNumber = (input) => {\r\n  // Gera o hash SHA-256 do número\r\n  const hash = CryptoJS.SHA256(input.toString()).toString();\r\n\r\n  // Usa mais caracteres do hash para melhorar a dispersão\r\n  const hashNumber = parseInt(hash.slice(0, 16), 16); // Usa 16 caracteres agora\r\n\r\n  // Garante que o número gerado seja entre 0 e 9\r\n  return hashNumber % 10;\r\n};\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n  \r\n    setIsLoading(true); // Ativa o loading\r\n  \r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n  \r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        const uniquePassword = generateUniquePassword(data.sequence); // Usando a senha sem repetição\r\n        setPassword(uniquePassword); // Guardando a senha única\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(uniquePassword); // Gera botões com a senha única\r\n  \r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões (exibindo números únicos)\r\n// Função para gerar os botões com os números da senha sem repetições\r\nconst generateButtons = (sequence) => {\r\n  // Filtra apenas os números únicos da senha\r\n  const uniqueNumbers = Array.from(new Set(sequence));\r\n\r\n  let allButtons = [];\r\n\r\n  // Gera os botões para os números únicos da senha\r\n  uniqueNumbers.forEach((num) => {\r\n    const shortNumber = hashToNumber(num); // Gera o número curto a partir do hash do número\r\n    allButtons.push({\r\n      num,\r\n      shortNumber,\r\n    });\r\n  });\r\n\r\n  // Embaralha a ordem dos botões\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  setButtons(allButtons); // Atualiza os botões no estado\r\n};\r\n\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.num}\r\n            onClick={() => handleButtonClick(button.num)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={\r\n              inputSequence.includes(button.num)\r\n                ? { backgroundColor: 'green' }\r\n                : {}\r\n            }\r\n          >\r\n            {button.shortNumber} {/* Exibe o número curto gerado */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (num) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\r\n    if (nextExpectedNumber === undefined) {\r\n      toast.error('A senha já foi completamente inserida!');\r\n      return;\r\n    }\r\n\r\n    // Verifica se o próximo número esperado está no par, independentemente da posição\r\n    const isValid = num === nextExpectedNumber;\r\n\r\n    if (isValid) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n\r\n        // Verifica se a sequência está completa e corresponde à senha\r\n        if (newSequence.length === flatPassword.length) {\r\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n          if (isCorrect) {\r\n            toast.success('Senha correta! Acesso liberado.');\r\n          } else {\r\n            toast.error('Sequência incorreta. Tente novamente.');\r\n            setIsButtonDisabled(true);\r\n            setTimeout(() => setIsButtonDisabled(false), 2000);\r\n          }\r\n        }\r\n\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\r\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\r\n    }\r\n  };\r\n\r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (password.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    // Variável para armazenar a senha gerada\r\n    let generatedPassword = [];\r\n\r\n    // Iterando sobre o array de 'password' e gerando os números curtos\r\n    password.forEach(pair => {\r\n      pair.forEach(num => {\r\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\r\n        generatedPassword.push(shortNumber);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>  {/* Exibe o array plano como uma string */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const generateUniquePassword = (sequence) => {\r\n    // Filtra a sequência para remover números repetidos\r\n    const uniqueSequence = Array.from(new Set(sequence));\r\n    \r\n    // Formata a sequência em pares\r\n    return formatSequence(uniqueSequence);  // Supondo que a função formatSequence já exista\r\n  };\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      // Comparando a sequência do usuário com a senha correta\r\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}