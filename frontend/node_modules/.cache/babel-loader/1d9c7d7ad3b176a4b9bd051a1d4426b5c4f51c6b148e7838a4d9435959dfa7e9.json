{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importando o crypto-js\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  useEffect(() => {\n    const key = generateFernetKey();\n    setSecretKey(key);\n    console.log('Generated Secret Key:', key);\n  }, []);\n\n  // Função para gerar nova sessão\n  const generateFernetKey = () => {\n    const randomWords = CryptoJS.lib.WordArray.random(32); // Gerar 32 bytes aleatórios\n    const base64Key = randomWords.toString(CryptoJS.enc.Base64); // Codificar como Base64\n    return base64Key;\n  };\n  const encryptSequence = (sequence, secretKey) => {\n    // Se for usar AES, ou substitua por Fernet no backend para manter compatibilidade\n    const sequenceStr = JSON.stringify(sequence);\n    const encryptedSequence = CryptoJS.AES.encrypt(sequenceStr, secretKey).toString();\n    return encryptedSequence;\n  };\n\n  // Exemplo de uso\n  const secretKey = generateFernetKey();\n  console.log('Generated Secret Key:', secretKey);\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões com misturados\n\n        console.log(\"Token de Verificação:\", data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    }\n  };\n\n  // Formata a sequência correta em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para validar a seleção\n  const isValidSelection = selectedNumber => {\n    const flatPassword = password.flat();\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    return selectedNumber === nextExpectedNumber;\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat();\n    const nextExpectedNumber = flatPassword[inputSequence.length];\n    const isValid = pair.includes(nextExpectedNumber);\n    if (isValid) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Gera botões misturados, incluindo as alternativas corretas\n  const generateButtons = sequence => {\n    let correctPairs = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n    correctPairs.forEach(pair => {\n      allButtons.push(pair);\n    });\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10);\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map((pair, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(pair),\n        disabled: isButtonDisabled,\n        children: [\"[\", pair[0], \" ou \", pair[1], \"]\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência ao final\n  const handleValidatePassword = async () => {\n    try {\n      const formattedSequence = [];\n      for (let i = 0; i < inputSequence.length; i += 2) {\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\n      }\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\n        return pair[0] === password[index][0] && pair[1] === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        toast.error('Sequência incorreta');\n        return;\n      }\n      const encryptedSequence = encryptSequence(formattedSequence, secretKey);\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n        session_id: sessionId,\n        sequence: encryptedSequence\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  const displayPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando senha...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 39\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      children: \"Gerar Nova Sess\\xE3o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), displayPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this), displayButtons(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequência selecionada ainda...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d9CxcJ2eoI0B7vXtUeoCSSn5ulc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","key","generateFernetKey","setSecretKey","console","log","randomWords","lib","WordArray","random","base64Key","toString","enc","Base64","encryptSequence","sequence","secretKey","sequenceStr","JSON","stringify","encryptedSequence","AES","encrypt","handleGenerateSession","error","data","generateSession","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","isValidSelection","selectedNumber","flatPassword","flat","nextExpectedNumber","handleButtonClick","pair","isValid","includes","prevSequence","newSequence","correctPairs","num1","num2","allButtons","forEach","Math","floor","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","disabled","handleValidatePassword","formattedSequence","isSequenceCorrect","every","response","post","headers","Authorization","message","displayPassword","join","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importando o crypto-js\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const key = generateFernetKey();\r\n    setSecretKey(key);\r\n    console.log('Generated Secret Key:', key);\r\n  }, []);\r\n\r\n  // Função para gerar nova sessão\r\n  const generateFernetKey = () => {\r\n    const randomWords = CryptoJS.lib.WordArray.random(32); // Gerar 32 bytes aleatórios\r\n    const base64Key = randomWords.toString(CryptoJS.enc.Base64); // Codificar como Base64\r\n    return base64Key;\r\n  };\r\n\r\n  const encryptSequence = (sequence, secretKey) => {\r\n    // Se for usar AES, ou substitua por Fernet no backend para manter compatibilidade\r\n    const sequenceStr = JSON.stringify(sequence);\r\n    const encryptedSequence = CryptoJS.AES.encrypt(sequenceStr, secretKey).toString();\r\n    return encryptedSequence;\r\n  };\r\n\r\n  // Exemplo de uso\r\n  const secretKey = generateFernetKey();\r\n  console.log('Generated Secret Key:', secretKey);\r\n\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões com misturados\r\n\r\n        console.log(\"Token de Verificação:\", data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    }\r\n  };\r\n\r\n  // Formata a sequência correta em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para validar a seleção\r\n  const isValidSelection = (selectedNumber) => {\r\n    const flatPassword = password.flat();\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n    return selectedNumber === nextExpectedNumber;\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat();\r\n    const nextExpectedNumber = flatPassword[inputSequence.length];\r\n    const isValid = pair.includes(nextExpectedNumber);\r\n\r\n    if (isValid) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, nextExpectedNumber];\r\n        console.log(\"Sequência do usuário após clique:\", newSequence);\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n    }\r\n  };\r\n\r\n  // Gera botões misturados, incluindo as alternativas corretas\r\n  const generateButtons = (sequence) => {\r\n    let correctPairs = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      let num1 = sequence[i];\r\n      let num2 = sequence[i + 1];\r\n      correctPairs.push([num1, num2]);\r\n    }\r\n\r\n    let allButtons = [];\r\n    correctPairs.forEach(pair => {\r\n      allButtons.push(pair);\r\n    });\r\n\r\n    for (let i = 0; i < correctPairs.length; i++) {\r\n      let num1 = Math.floor(Math.random() * 10);\r\n      let num2 = Math.floor(Math.random() * 10);\r\n      allButtons.push([num1, num2]);\r\n    }\r\n\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n    setButtons(allButtons);\r\n  };\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((pair, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleButtonClick(pair)}\r\n            disabled={isButtonDisabled}\r\n          >\r\n            [{pair[0]} ou {pair[1]}]\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência ao final\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      const formattedSequence = [];\r\n      for (let i = 0; i < inputSequence.length; i += 2) {\r\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\r\n      }\r\n\r\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\r\n\r\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\r\n        return (\r\n          pair[0] === password[index][0] && pair[1] === password[index][1]\r\n        );\r\n      });\r\n\r\n      if (!isSequenceCorrect) {\r\n        toast.error('Sequência incorreta');\r\n        return;\r\n      }\r\n      const encryptedSequence = encryptSequence(formattedSequence, secretKey);\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\r\n        session_id: sessionId,\r\n        sequence: encryptedSequence,\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n      setIsButtonDisabled(true);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  const displayPassword = () => {\r\n    if (password.length === 0) return <p>Carregando senha...</p>;\r\n\r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]},${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div>\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession}>Gerar Nova Sessão</button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          <h2>Senha Gerada:</h2>\r\n          {displayPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          {displayButtons()}\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.map(pair => `[${pair[0]},${pair[1]}]`).join(' ') || \"Nenhuma sequência selecionada ainda...\"}</p>\r\n\r\n          <button onClick={handleValidatePassword}>Validar Senha</button>\r\n\r\n          <div>\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}