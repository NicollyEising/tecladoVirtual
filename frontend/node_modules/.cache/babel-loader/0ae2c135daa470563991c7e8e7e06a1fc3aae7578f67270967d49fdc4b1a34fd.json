{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para gerar hash para cada número individualmente\n  const hashToNumber = input => {\n    if (input === undefined || input === null) {\n      console.error(\"Valor inválido para hash:\", input);\n      return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\n    }\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\n    let uniqueNumber = 0;\n\n    // Soma os códigos dos caracteres do hash\n    for (let i = 0; i < hash.length; i++) {\n      uniqueNumber += hash.charCodeAt(i);\n    }\n\n    // Garante que o número gerado esteja no intervalo de 1 a 9\n    return uniqueNumber % 9 + 1;\n  };\n\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  // Função para gerar os botões (agora com hash gerado por número individual)\n  const generateButtons = sequence => {\n    let allButtons = [];\n\n    // Gera os botões para cada número da sequência\n    sequence.forEach((num, index) => {\n      // Gera o primeiro número curto a partir do número da sequência\n      const shortNumber = hashToNumber(num);\n\n      // Gera o segundo número curto de forma consistente, sempre baseado na posição\n      // Usamos o índice para garantir que cada botão tenha um número distinto\n      const secondShortNumber = hashToNumber(sequence[(index + 1) % sequence.length]); // Usa o próximo número ou retorna ao início se chegar ao fim\n\n      allButtons.push({\n        num,\n        shortNumber,\n        // Primeiro número curto\n        secondShortNumber // Segundo número curto derivado\n      });\n    });\n\n    // Embaralha a ordem dos botões\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n    setButtons(allButtons); // Atualiza os botões no estado\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.num),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.num) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.secondShortNumber, \" ou \", button.shortNumber, \" \"]\n      }, button.num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\n    if (nextExpectedNumber === undefined) {\n      toast.error('A senha já foi completamente inserida!');\n      return;\n    }\n\n    // Verifica se ambos os números do par são válidos em relação à sequência\n    const isValidFirstNumber = pair === nextExpectedNumber;\n    const isValidSecondNumber = pair === nextExpectedNumber + 1;\n\n    // Se qualquer um dos dois números do par for válido, prossegue\n    if (isValidFirstNumber || isValidSecondNumber) {\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, pair];\n        console.log('Sequência do usuário após clique:', newSequence);\n\n        // Verifica se a sequência está completa e corresponde à senha\n        if (newSequence.length === flatPassword.length) {\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\n          if (isCorrect) {\n            toast.success('Senha correta! Acesso liberado.');\n          } else {\n            toast.error('Sequência incorreta. Tente novamente.');\n            setIsButtonDisabled(true);\n            setTimeout(() => setIsButtonDisabled(false), 2000);\n          }\n        }\n        return newSequence;\n      });\n    } else {\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (password.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 39\n    }, this);\n    let generatedPassword = [];\n    password.forEach(pair => {\n      pair.forEach(num => {\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\n        generatedPassword.push(shortNumber);\n      });\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Senha Gerada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `[${generatedPassword.join(', ')}]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      console.log('Session ID enviado:', sessionId);\n      const formattedSequence = password.flat().map(item => item.toString());\n      console.log('Senha do usuário antes do envio:', formattedSequence);\n\n      // Comparando a sequência do usuário com a senha correta\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\n        return;\n      }\n      const data = {\n        session_id: sessionId,\n        sequence: formattedSequence\n      };\n\n      // Criptografa o sessionId antes de enviar ao backend\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Encrypted-Session-Id': encryptedSessionId // Envia sessionId criptografado\n        }\n      });\n      console.log('✅ Sequência validada com sucesso:', response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToNumber","input","undefined","console","error","hash","SHA256","toString","enc","Base64","uniqueNumber","i","length","charCodeAt","handleGenerateSession","data","generateSession","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","push","allButtons","forEach","num","index","shortNumber","secondShortNumber","sort","Math","random","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","style","includes","backgroundColor","pair","flatPassword","flat","nextExpectedNumber","isValidFirstNumber","isValidSecondNumber","prevSequence","newSequence","isCorrect","every","setTimeout","displayGeneratedPassword","generatedPassword","join","handleValidatePassword","formattedSequence","item","encryptedSessionId","AES","encrypt","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para gerar hash para cada número individualmente\r\n  const hashToNumber = (input) => {\r\n    if (input === undefined || input === null) {\r\n      console.error(\"Valor inválido para hash:\", input);\r\n      return 0; // Retorna 0 ou outro valor padrão caso o input seja inválido\r\n    }\r\n  \r\n    const hash = CryptoJS.SHA256(input.toString()).toString(CryptoJS.enc.Base64); // Base64 para garantir um valor único\r\n    let uniqueNumber = 0;\r\n    \r\n    // Soma os códigos dos caracteres do hash\r\n    for (let i = 0; i < hash.length; i++) {\r\n      uniqueNumber += hash.charCodeAt(i);\r\n    }\r\n  \r\n    // Garante que o número gerado esteja no intervalo de 1 a 9\r\n    return (uniqueNumber % 9) + 1;\r\n  };\r\n\r\n\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Ativa o loading\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  // Função para gerar os botões (agora com hash gerado por número individual)\r\n  const generateButtons = (sequence) => {\r\n    let allButtons = [];\r\n  \r\n    // Gera os botões para cada número da sequência\r\n    sequence.forEach((num, index) => {\r\n      // Gera o primeiro número curto a partir do número da sequência\r\n      const shortNumber = hashToNumber(num);\r\n      \r\n      // Gera o segundo número curto de forma consistente, sempre baseado na posição\r\n      // Usamos o índice para garantir que cada botão tenha um número distinto\r\n      const secondShortNumber = hashToNumber(sequence[(index + 1) % sequence.length]);  // Usa o próximo número ou retorna ao início se chegar ao fim\r\n  \r\n      allButtons.push({\r\n        num,\r\n        shortNumber,       // Primeiro número curto\r\n        secondShortNumber, // Segundo número curto derivado\r\n      });\r\n    });\r\n  \r\n    // Embaralha a ordem dos botões\r\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n  \r\n    setButtons(allButtons); // Atualiza os botões no estado\r\n  };\r\n  \r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.num}\r\n            onClick={() => handleButtonClick(button.num)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={inputSequence.includes(button.num) ? { backgroundColor: 'green' } : {}}\r\n          >\r\n            {button.secondShortNumber} ou {button.shortNumber} {/* Exibe ambos os números */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  const handleButtonClick = (pair) => {\r\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n    // Verifica se há um próximo número esperado (caso a senha já tenha sido totalmente inserida)\r\n    if (nextExpectedNumber === undefined) {\r\n      toast.error('A senha já foi completamente inserida!');\r\n      return;\r\n    }\r\n\r\n    // Verifica se ambos os números do par são válidos em relação à sequência\r\n    const isValidFirstNumber = pair === nextExpectedNumber;\r\n    const isValidSecondNumber = pair === nextExpectedNumber + 1;\r\n\r\n    // Se qualquer um dos dois números do par for válido, prossegue\r\n    if (isValidFirstNumber || isValidSecondNumber) {\r\n      setInputSequence((prevSequence) => {\r\n        const newSequence = [...prevSequence, pair];\r\n        console.log('Sequência do usuário após clique:', newSequence);\r\n\r\n        // Verifica se a sequência está completa e corresponde à senha\r\n        if (newSequence.length === flatPassword.length) {\r\n          const isCorrect = newSequence.every((num, index) => num === flatPassword[index]);\r\n          if (isCorrect) {\r\n            toast.success('Senha correta! Acesso liberado.');\r\n          } else {\r\n            toast.error('Sequência incorreta. Tente novamente.');\r\n            setIsButtonDisabled(true);\r\n            setTimeout(() => setIsButtonDisabled(false), 2000);\r\n          }\r\n        }\r\n\r\n        return newSequence;\r\n      });\r\n    } else {\r\n      toast.error(`Par incorreto. O próximo número esperado é ${nextExpectedNumber}. Tente novamente.`);\r\n      setIsButtonDisabled(true); // Desabilitar todos os botões após erro\r\n      setTimeout(() => setIsButtonDisabled(false), 2000); // Habilitar novamente após 2 segundos\r\n    }\r\n  };\r\n\r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (password.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    let generatedPassword = [];\r\n    password.forEach(pair => {\r\n      pair.forEach(num => {\r\n        const shortNumber = hashToNumber(num); // Gerando o número curto para cada número da senha\r\n        generatedPassword.push(shortNumber);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h2>Senha Gerada:</h2>\r\n        <p>{`[${generatedPassword.join(', ')}]`}</p>  {/* Exibe o array plano como uma string */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      console.log('Session ID enviado:', sessionId);\r\n\r\n      const formattedSequence = password.flat().map((item) => item.toString());\r\n      console.log('Senha do usuário antes do envio:', formattedSequence);\r\n\r\n      // Comparando a sequência do usuário com a senha correta\r\n      if (inputSequence.join(' ') !== formattedSequence.join(' ')) {\r\n        toast.error('A sequência digitada está incorreta. Tente novamente.');\r\n        return;\r\n      }\r\n\r\n      const data = {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      };\r\n\r\n      // Criptografa o sessionId antes de enviar ao backend\r\n      const encryptedSessionId = CryptoJS.AES.encrypt(sessionId, 'chave-secreta').toString();\r\n\r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Encrypted-Session-Id': encryptedSessionId, // Envia sessionId criptografado\r\n        },\r\n      });\r\n\r\n      console.log('✅ Sequência validada com sucesso:', response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}