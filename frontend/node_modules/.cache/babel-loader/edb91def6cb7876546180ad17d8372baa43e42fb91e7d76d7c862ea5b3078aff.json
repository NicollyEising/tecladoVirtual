{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\faculdade\\\\Desktop\\\\Algoritmos Avan\\xE7ados\\\\tecladoVirtual\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './api.css';\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [sessionId, setSessionId] = useState('');\n  const [password, setPassword] = useState([]);\n  const [inputSequence, setInputSequence] = useState([]);\n  const [token, setToken] = useState('');\n  const [isSessionValid, setIsSessionValid] = useState(false);\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\n  const [buttons, setButtons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\n\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\n  const hashToShortNumber = input => {\n    // Gera um hash SHA-256 do input\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n    // Pega os primeiros 8 caracteres do hash e converte para decimal\n    const hashPart = parseInt(hash.slice(0, 8), 16);\n    // Limita o número ao intervalo 1000-9999\n    return 0 + hashPart % 9; // Garante que o número esteja entre 1000 e 9999\n  };\n  const hashToTwoNumbers = input => {\n    // Gera um hash SHA-256 do input\n    const hash = CryptoJS.SHA256(input.toString()).toString();\n\n    // Pega diferentes partes do hash para garantir exclusividade\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\n\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\n    return [num1, num2];\n  };\n  // Função para gerar nova sessão\n  const handleGenerateSession = async () => {\n    if (!username) {\n      toast.error('Por favor, insira um nome de usuário.');\n      return;\n    }\n    setIsLoading(true); // Ativa o loading\n\n    try {\n      const data = await generateSession(username);\n      console.log('Dados recebidos da API:', data);\n      if (data && data.sequence && Array.isArray(data.sequence)) {\n        setSessionId(data.session_id);\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\n        setToken(data.token);\n        setIsSessionValid(true);\n        generateButtons(data.sequence); // Gera botões misturados\n\n        console.log('Token de Verificação:', data.token);\n        toast.success('Sessão gerada com sucesso!');\n      } else {\n        toast.error('Erro: a sequência não foi retornada corretamente.');\n      }\n    } catch (error) {\n      toast.error('Erro ao gerar sessão');\n      console.error('Erro ao gerar sessão:', error);\n    } finally {\n      setIsLoading(false); // Desativa o loading\n    }\n  };\n\n  // Função para formatar a sequência em pares\n  const formatSequence = sequence => {\n    let formatted = [];\n    for (let i = 0; i < sequence.length; i += 2) {\n      formatted.push([sequence[i], sequence[i + 1]]);\n    }\n    return formatted;\n  };\n\n  // Função para gerar os botões (misturados)\n  // Função para gerar os botões (misturados)\n\n  const generateButtons = sequence => {\n    let correctPairs = [];\n\n    // Criar pares corretos com opções alternativas\n    for (let i = 0; i < sequence.length; i += 2) {\n      let num1 = sequence[i];\n      let num2 = sequence[i + 1];\n\n      // Adiciona cada par como uma opção alternada\n      correctPairs.push([num1, num2]);\n    }\n    let allButtons = [];\n\n    // Adiciona os pares corretos\n    correctPairs.forEach(pair => {\n      allButtons.push(pair);\n    });\n\n    // Adiciona pares falsos aleatórios (números aleatórios)\n    for (let i = 0; i < correctPairs.length; i++) {\n      let num1 = Math.floor(Math.random() * 10); // Número aleatório entre 0-9\n      let num2 = Math.floor(Math.random() * 10);\n      allButtons.push([num1, num2]);\n    }\n\n    // Embaralha os pares de botões para simular o hash da sequência\n    allButtons = allButtons.sort(() => Math.random() - 0.5);\n\n    // Define os botões embaralhados no estado\n    setButtons(allButtons);\n  };\n\n  // Exibe os botões misturados\n  const displayButtons = () => {\n    if (buttons.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Esperando sequ\\xEAncia...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 38\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(button.pair),\n        disabled: isButtonDisabled,\n        className: \"button\",\n        style: inputSequence.includes(button.pair[0]) || inputSequence.includes(button.pair[1]) ? {\n          backgroundColor: 'green'\n        } : {},\n        children: [button.shortNumbers[0], \" \", button.shortNumbers[1], \" \"]\n      }, button.hashKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para lidar com o clique nos botões\n  // Função para lidar com o clique nos botões\n  const handleButtonClick = pair => {\n    const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\n    const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\n\n    // Verifica se o número do par é válido (igual ao próximo número esperado)\n    const isValid = pair.includes(nextExpectedNumber); // Verifica se o próximo número esperado está no par\n\n    if (isValid) {\n      // Se for válido, adiciona o número à sequência\n      setInputSequence(prevSequence => {\n        const newSequence = [...prevSequence, nextExpectedNumber];\n        console.log(\"Sequência do usuário após clique:\", newSequence);\n        return newSequence;\n      });\n    } else {\n      // Se for inválido, exibe uma mensagem de erro e não faz nada\n      toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\n    }\n  };\n\n  // Exibe a senha gerada com os números curtos\n  const displayGeneratedPassword = () => {\n    if (!password || password.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Carregando senha...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: password.map(pair => `[${pair[0]}, ${pair[1]}]`).join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Função para validar a sequência\n  const handleValidatePassword = async () => {\n    try {\n      // Ensure the sequence is in pairs\n      const formattedSequence = [];\n      for (let i = 0; i < inputSequence.length; i += 2) {\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\n      }\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\n\n      // Check if the formatted sequence matches the password\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\n        return pair[0] === password[index][0] && pair[1] === password[index][1];\n      });\n      if (!isSequenceCorrect) {\n        toast.error('Sequência incorreta');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\n        session_id: sessionId,\n        sequence: formattedSequence\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\n      toast.success('Sequência validada com sucesso!');\n      setIsSessionValid(false);\n      setIsButtonDisabled(true);\n    } catch (error) {\n      console.log('Error response:', error.response ? error.response.data : error.message);\n      toast.error('Erro ao validar a sequência');\n    }\n  };\n\n  // Função para gerar sessão no backend\n  const generateSession = async username => {\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', {\n      username\n    });\n    console.log('Resposta da API de geração de sessão:', response.data);\n    return response.data;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Teclado Virtual\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"username\",\n        children: \"Nome de Usu\\xE1rio:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        placeholder: \"Digite seu nome de usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateSession,\n      className: \"primary-button\",\n      disabled: isLoading,\n      children: isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), isSessionValid ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [displayGeneratedPassword(), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Clique nos bot\\xF5es abaixo para digitar a senha:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: displayButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Senha Selecionada:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputSequence.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleValidatePassword,\n        className: \"primary-button\",\n        children: \"Validar Senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"token-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Token de Verifica\\xE7\\xE3o:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eIx+b+r9j2UTAAJYly2mAUAaAp8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ToastContainer","toast","axios","CryptoJS","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","username","setUsername","sessionId","setSessionId","password","setPassword","inputSequence","setInputSequence","token","setToken","isSessionValid","setIsSessionValid","isButtonDisabled","setIsButtonDisabled","buttons","setButtons","isLoading","setIsLoading","hashToShortNumber","input","hash","SHA256","toString","hashPart","parseInt","slice","hashToTwoNumbers","num1","num2","handleGenerateSession","error","data","generateSession","console","log","sequence","Array","isArray","session_id","formatSequence","generateButtons","success","formatted","i","length","push","correctPairs","allButtons","forEach","pair","Math","floor","random","sort","displayButtons","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","button","onClick","handleButtonClick","disabled","style","includes","backgroundColor","shortNumbers","hashKey","flatPassword","flat","nextExpectedNumber","isValid","prevSequence","newSequence","displayGeneratedPassword","join","handleValidatePassword","formattedSequence","isSequenceCorrect","every","index","response","post","headers","Authorization","message","htmlFor","id","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/faculdade/Desktop/Algoritmos Avançados/tecladoVirtual/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './api.css';\r\nimport CryptoJS from 'crypto-js'; // Importe a biblioteca\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [sessionId, setSessionId] = useState('');\r\n  const [password, setPassword] = useState([]);\r\n  const [inputSequence, setInputSequence] = useState([]);\r\n  const [token, setToken] = useState('');\r\n  const [isSessionValid, setIsSessionValid] = useState(false);\r\n  const [isButtonDisabled, setIsButtonDisabled] = useState(false);\r\n  const [buttons, setButtons] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false); // Para controle de loading\r\n\r\n  // Função para converter um hash em um número curto (ex.: entre 1000 e 9999)\r\n  const hashToShortNumber = (input) => {\r\n    // Gera um hash SHA-256 do input\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    // Pega os primeiros 8 caracteres do hash e converte para decimal\r\n    const hashPart = parseInt(hash.slice(0, 8), 16);\r\n    // Limita o número ao intervalo 1000-9999\r\n    return 0 + (hashPart % 9); // Garante que o número esteja entre 1000 e 9999\r\n  };\r\n  const hashToTwoNumbers = (input) => {\r\n    // Gera um hash SHA-256 do input\r\n    const hash = CryptoJS.SHA256(input.toString()).toString();\r\n    \r\n    // Pega diferentes partes do hash para garantir exclusividade\r\n    const num1 = parseInt(hash.slice(0, 8), 16) % 10; // Primeiro número\r\n    const num2 = parseInt(hash.slice(8, 16), 16) % 10; // Segundo número\r\n    \r\n    // Certifica-se de que num1 e num2 são sempre exclusivos para esse par\r\n    return [num1, num2];\r\n  };\r\n  // Função para gerar nova sessão\r\n  const handleGenerateSession = async () => {\r\n    if (!username) {\r\n      toast.error('Por favor, insira um nome de usuário.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Ativa o loading\r\n\r\n    try {\r\n      const data = await generateSession(username);\r\n      console.log('Dados recebidos da API:', data);\r\n\r\n      if (data && data.sequence && Array.isArray(data.sequence)) {\r\n        setSessionId(data.session_id);\r\n        setPassword(formatSequence(data.sequence)); // Guardando a senha formatada\r\n        setToken(data.token);\r\n        setIsSessionValid(true);\r\n        generateButtons(data.sequence); // Gera botões misturados\r\n\r\n        console.log('Token de Verificação:', data.token);\r\n        toast.success('Sessão gerada com sucesso!');\r\n      } else {\r\n        toast.error('Erro: a sequência não foi retornada corretamente.');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Erro ao gerar sessão');\r\n      console.error('Erro ao gerar sessão:', error);\r\n    } finally {\r\n      setIsLoading(false); // Desativa o loading\r\n    }\r\n  };\r\n\r\n  // Função para formatar a sequência em pares\r\n  const formatSequence = (sequence) => {\r\n    let formatted = [];\r\n    for (let i = 0; i < sequence.length; i += 2) {\r\n      formatted.push([sequence[i], sequence[i + 1]]);\r\n    }\r\n    return formatted;\r\n  };\r\n\r\n  // Função para gerar os botões (misturados)\r\n // Função para gerar os botões (misturados)\r\n\r\n\r\n const generateButtons = (sequence) => {\r\n  let correctPairs = [];\r\n\r\n  // Criar pares corretos com opções alternativas\r\n  for (let i = 0; i < sequence.length; i += 2) {\r\n    let num1 = sequence[i];\r\n    let num2 = sequence[i + 1];\r\n    \r\n    // Adiciona cada par como uma opção alternada\r\n    correctPairs.push([num1, num2]);\r\n  }\r\n\r\n  let allButtons = [];\r\n\r\n  // Adiciona os pares corretos\r\n  correctPairs.forEach(pair => {\r\n    allButtons.push(pair);\r\n  });\r\n\r\n  // Adiciona pares falsos aleatórios (números aleatórios)\r\n  for (let i = 0; i < correctPairs.length; i++) {\r\n    let num1 = Math.floor(Math.random() * 10);  // Número aleatório entre 0-9\r\n    let num2 = Math.floor(Math.random() * 10);\r\n    allButtons.push([num1, num2]);\r\n  }\r\n\r\n  // Embaralha os pares de botões para simular o hash da sequência\r\n  allButtons = allButtons.sort(() => Math.random() - 0.5);\r\n\r\n  // Define os botões embaralhados no estado\r\n  setButtons(allButtons);\r\n};\r\n\r\n\r\n  // Exibe os botões misturados\r\n  const displayButtons = () => {\r\n    if (buttons.length === 0) return <p>Esperando sequência...</p>;\r\n\r\n    return (\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button\r\n            key={button.hashKey}\r\n            onClick={() => handleButtonClick(button.pair)}\r\n            disabled={isButtonDisabled}\r\n            className=\"button\"\r\n            style={\r\n              inputSequence.includes(button.pair[0]) || inputSequence.includes(button.pair[1])\r\n                ? { backgroundColor: 'green' }\r\n                : {}\r\n            }\r\n          >\r\n            {button.shortNumbers[0]} {button.shortNumbers[1]} {/* Exibe os dois números curtos */}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Função para lidar com o clique nos botões\r\n  // Função para lidar com o clique nos botões\r\nconst handleButtonClick = (pair) => {\r\n  const flatPassword = password.flat(); // \"Achata\" a senha para facilitar a comparação\r\n  const nextExpectedNumber = flatPassword[inputSequence.length]; // Obtém o próximo número esperado da senha\r\n\r\n  // Verifica se o número do par é válido (igual ao próximo número esperado)\r\n  const isValid = pair.includes(nextExpectedNumber); // Verifica se o próximo número esperado está no par\r\n\r\n  if (isValid) {\r\n    // Se for válido, adiciona o número à sequência\r\n    setInputSequence((prevSequence) => {\r\n      const newSequence = [...prevSequence, nextExpectedNumber];\r\n      console.log(\"Sequência do usuário após clique:\", newSequence);\r\n      return newSequence;\r\n    });\r\n  } else {\r\n    // Se for inválido, exibe uma mensagem de erro e não faz nada\r\n    toast.error(`Número ${nextExpectedNumber} não está no par. Tente novamente.`);\r\n  }\r\n};\r\n\r\n  \r\n  \r\n  // Exibe a senha gerada com os números curtos\r\n  const displayGeneratedPassword = () => {\r\n    if (!password || password.length === 0) {\r\n      return <p>Carregando senha...</p>;\r\n    }\r\n  \r\n    return (\r\n      <p>\r\n        {password.map(pair => `[${pair[0]}, ${pair[1]}]`).join(' ')}\r\n      </p>\r\n    );\r\n  };\r\n  \r\n\r\n\r\n  // Função para validar a sequência\r\n  const handleValidatePassword = async () => {\r\n    try {\r\n      // Ensure the sequence is in pairs\r\n      const formattedSequence = [];\r\n      for (let i = 0; i < inputSequence.length; i += 2) {\r\n        formattedSequence.push([inputSequence[i], inputSequence[i + 1]]);\r\n      }\r\n  \r\n      console.log(\"Senha do usuário antes do envio:\", formattedSequence);\r\n  \r\n      // Check if the formatted sequence matches the password\r\n      const isSequenceCorrect = formattedSequence.every((pair, index) => {\r\n        return (\r\n          pair[0] === password[index][0] && pair[1] === password[index][1]\r\n        );\r\n      });\r\n  \r\n      if (!isSequenceCorrect) {\r\n        toast.error('Sequência incorreta');\r\n        return;\r\n      }\r\n  \r\n      const response = await axios.post('http://127.0.0.1:8000/validate_sequence', {\r\n        session_id: sessionId,\r\n        sequence: formattedSequence,\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      console.log(\"✅ Sequência validada com sucesso:\", response.data);\r\n      toast.success('Sequência validada com sucesso!');\r\n      setIsSessionValid(false);\r\n      setIsButtonDisabled(true);\r\n    } catch (error) {\r\n      console.log('Error response:', error.response ? error.response.data : error.message);\r\n      toast.error('Erro ao validar a sequência');\r\n    }\r\n  };\r\n  \r\n\r\n  // Função para gerar sessão no backend\r\n  const generateSession = async (username) => {\r\n    const response = await axios.post('http://127.0.0.1:8000/generate_session', { username });\r\n    console.log('Resposta da API de geração de sessão:', response.data);\r\n    return response.data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Teclado Virtual</h1>\r\n\r\n      <div className=\"form-container\">\r\n        <label htmlFor=\"username\">Nome de Usuário:</label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n          placeholder=\"Digite seu nome de usuário\"\r\n        />\r\n      </div>\r\n\r\n      <button onClick={handleGenerateSession} className=\"primary-button\" disabled={isLoading}>\r\n        {isLoading ? 'Gerando Sessão...' : 'Gerar Nova Sessão'}\r\n      </button>\r\n\r\n      {isSessionValid ? (\r\n        <>\r\n          {displayGeneratedPassword()}\r\n\r\n          <h2>Clique nos botões abaixo para digitar a senha:</h2>\r\n          <div className=\"buttons-container\">{displayButtons()}</div>\r\n\r\n          <h3>Senha Selecionada:</h3>\r\n          <p>{inputSequence.join(' ')}</p>\r\n\r\n          <button onClick={handleValidatePassword} className=\"primary-button\">\r\n            Validar Senha\r\n          </button>\r\n\r\n          <div className=\"token-info\">\r\n            <h3>Token de Verificação:</h3>\r\n            <p>{token}</p>\r\n          </div>\r\n        </>\r\n      ) : null}\r\n\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}