import hashlib
import base64
import random
import secrets
from datetime import datetime, timedelta
from pymongo import MongoClient
from cryptography.fernet import Fernet
import os
from jose import JWTError, jwt
from fastapi import FastAPI, HTTPException, Request, Header
from pydantic import BaseModel

# üîπ Configura√ß√£o do banco de dados MongoDB
MONGO_URI = "mongodb+srv://nicollymunhozeising85:RRSAkX1DsOd5MRVO@cluster0.9xwlq.mongodb.net/"
client = MongoClient(MONGO_URI)
db = client["teclado_virtual"]
sessions_collection = db["sessions"]
blocked_ips_collection = db["blocked_ips"]

# üîπ Configura√ß√£o de chave de criptografia AES (agora armazenada com seguran√ßa)
FERNET_KEY = Fernet.generate_key()
cipher = Fernet(FERNET_KEY) 

# üîπ Configura√ß√µes de seguran√ßa
SESSION_EXPIRATION_MINUTES = 5
MAX_FAILED_ATTEMPTS = 3
IP_BLOCK_DURATION_SECONDS = 10  # Alterado para 10 segundos
MAX_SESSIONS_BEFORE_REUSE = 1000  # Defina o valor desejado para limitar o n√∫mero de sess√µes


# üîπ Configura√ß√µes do FastAPI
app = FastAPI()

# üîπ Configura√ß√µes de seguran√ßa e validade
SECRET_KEY = os.getenv("SECRET_KEY", "supersecretkey")
BLOCK_DURATION_SECONDS = 10  # Alterado para 10 segundos (apenas para refer√™ncia, n√£o usado diretamente aqui)
JWT_EXPIRATION_MINUTES = 15  # Configura√ß√£o do tempo de expira√ß√£o do JWT

# üîπ Fun√ß√£o para gerar pares de n√∫meros aleat√≥rios
def generate_random_pairs():
    numbers = list(range(1, 10))  # N√∫meros de 1 a 9
    random.shuffle(numbers)  # Embaralha os n√∫meros
    pairs = [(numbers[i], numbers[i + 1]) for i in range(0, len(numbers) - 1, 2)]  # Cria pares consecutivos
    return pairs

# üîπ Fun√ß√£o para gerar hash do ID de sess√£o
def hash_session_id(session_id):
    return base64.urlsafe_b64encode(hashlib.sha256(session_id.encode()).digest()).decode()

# üîπ Fun√ß√£o para salvar a sess√£o no banco de dados
def save_session(hashed_id, sequence, expiration_time, attempts=0, ip_address=None):
    session_data = {
        "session_id": hashed_id,
        "sequence": sequence,
        "expires_at": expiration_time,
        "attempts": attempts,
        "ip_address": ip_address
    }

    sessions_collection.update_one(
        {"session_id": hashed_id},
        {"$set": session_data},
        upsert=True
    )

# üîπ Fun√ß√£o para recuperar uma sess√£o pelo ID hashado
def get_session(hashed_id):
    return sessions_collection.find_one({"session_id": hashed_id})

# üîπ Fun√ß√£o para deletar uma sess√£o
def delete_session(hashed_id):
    result = sessions_collection.delete_one({"session_id": hashed_id})
    return result.deleted_count > 0

# üîπ Fun√ß√£o para contar o n√∫mero total de sess√µes ativas
def get_session_count():
    return sessions_collection.count_documents({})

# üîπ Fun√ß√£o para verificar se um IP est√° bloqueado
def is_ip_blocked(ip_address):
    blocked_ip = blocked_ips_collection.find_one({"ip": ip_address})
    if blocked_ip:
        # Verifica se o bloqueio j√° expirou
        if blocked_ip["expires_at"] < datetime.utcnow():
            blocked_ips_collection.delete_one({"ip": ip_address})
            return False
        return True
    return False

# üîπ Fun√ß√£o para bloquear um IP ap√≥s tentativas falhas
def block_ip(ip_address):
    expires_at = datetime.utcnow() + timedelta(seconds=IP_BLOCK_DURATION_SECONDS)  # Alterado para segundos
    blocked_ips_collection.update_one(
        {"ip": ip_address},
        {"$set": {"ip": ip_address, "expires_at": expires_at}},
        upsert=True
    )

# üîπ Fun√ß√£o para incrementar tentativas de falha e bloquear IP se necess√°rio
def increment_failed_attempts(hashed_id, ip_address):
    session = get_session(hashed_id)
    if not session:
        return
    
    attempts = session.get("attempts", 0) + 1
    save_session(hashed_id, session["sequence"], session["expires_at"], attempts, ip_address)

    if attempts >= MAX_FAILED_ATTEMPTS:
        block_ip(ip_address)
        delete_session(hashed_id)  # Remove a sess√£o ap√≥s atingir o limite de tentativas

# üîπ Fun√ß√£o para limpar sess√µes expiradas automaticamente (movida para tarefa agendada)
def clean_expired_sessions():
    now = datetime.utcnow()
    sessions_collection.delete_many({"expires_at": {"$lt": now}})

# üîπ Gera token JWT para seguran√ßa opcional
def generate_jwt(session_id):
    expiration_time = datetime.utcnow() + timedelta(minutes=JWT_EXPIRATION_MINUTES)
    payload = {"session_id": session_id, "exp": expiration_time}
    return jwt.encode(payload, SECRET_KEY, algorithm="HS256")

# üîπ Fun√ß√£o para validar o JWT
def validate_jwt(token: str, expected_session_id: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        token_session_id = payload.get("session_id")
        if token_session_id != expected_session_id:
            raise HTTPException(status_code=401, detail="Token n√£o corresponde √† sess√£o.")
        return True
    except JWTError as e:
        raise HTTPException(status_code=401, detail=f"Token inv√°lido ou expirado: {str(e)}")

# üîπ Modelo para requisi√ß√µes de valida√ß√£o
class ValidationRequest(BaseModel):
    session_id: str
    sequence: list[list[int]]  # Aceita uma lista de listas de inteiros

class InvalidateSessionRequest(BaseModel):
    session_id: str

# üîπ Endpoint para gerar uma nova sess√£o
@app.post("/generate_session")
def generate_session():
    clean_expired_sessions()  # Limpa sess√µes expiradas antes de criar uma nova
    session_id = secrets.token_hex(16)
    hashed_id = hash_session_id(session_id)

    # Verifica o limite de reutiliza√ß√£o de sess√µes
    session_count = get_session_count()
    if session_count >= MAX_SESSIONS_BEFORE_REUSE:
        raise HTTPException(status_code=400, detail="Limite de sess√µes atingido, tente novamente mais tarde.")
    
    pairs = generate_random_pairs()
    correct_sequence = [num for pair in pairs for num in pair]
    expiration_time = datetime.utcnow() + timedelta(minutes=SESSION_EXPIRATION_MINUTES)

    save_session(hashed_id, correct_sequence, expiration_time)
    encrypted_session_id = cipher.encrypt(session_id.encode()).decode()
    
    return {"session_id": encrypted_session_id, "sequence": pairs, "token": generate_jwt(session_id)}

# üîπ Endpoint para validar a sequ√™ncia
@app.post("/validate_sequence")
def validate_sequence(data: ValidationRequest, request: Request, authorization: str = Header(None)):
    client_ip = request.client.host

    # Verifica se o IP est√° bloqueado
    if is_ip_blocked(client_ip):
        raise HTTPException(status_code=403, detail="Muitas tentativas falhas. Tente novamente mais tarde.")
    
    # Verifica se o token JWT foi fornecido
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Token n√£o fornecido ou inv√°lido.")
    
    token = authorization.split(" ")[1]
    
    # Tenta descriptografar o ID da sess√£o
    try:
        decrypted_session_id = cipher.decrypt(data.session_id.encode()).decode()
    except Exception as e:
        raise HTTPException(status_code=400, detail="Erro de decripta√ß√£o. Sess√£o inv√°lida ou corrompida.")
    
    # Valida o JWT e verifica se corresponde ao session_id
    validate_jwt(token, decrypted_session_id)
    
    # Recupera a sess√£o usando o ID hashado
    hashed_id = hash_session_id(decrypted_session_id)
    session = get_session(hashed_id)
    
    # Verifica se a sess√£o existe e est√° v√°lida
    if not session or session["expires_at"] < datetime.utcnow():
        delete_session(hashed_id)
        raise HTTPException(status_code=400, detail="Sess√£o inv√°lida ou expirada.")
    
    # "Achata" a lista de listas enviada pelo cliente
    flattened_sequence = [num for pair in data.sequence for num in pair]
    
    # Verifica se a sequ√™ncia enviada √© igual √† sequ√™ncia correta
    if session["sequence"] != flattened_sequence:
        increment_failed_attempts(hashed_id, client_ip)
        raise HTTPException(status_code=400, detail="Sequ√™ncia incorreta.")
    
    # Se a sequ√™ncia estiver correta, invalida a sess√£o
    delete_session(hashed_id)
    return {"message": "Sequ√™ncia validada com sucesso."}

# üîπ Endpoint para invalidar uma sess√£o manualmente
@app.post("/invalidate_session")
def invalidate_session(data: InvalidateSessionRequest):
    try:
        decrypted_session_id = cipher.decrypt(data.session_id.encode()).decode()
    except Exception as e:
        raise HTTPException(status_code=400, detail="Erro de decripta√ß√£o. Sess√£o inv√°lida ou corrompida.")
    
    hashed_id = hash_session_id(decrypted_session_id)
    if delete_session(hashed_id):
        return {"message": "Sess√£o invalidada."}
    return {"message": "Sess√£o n√£o encontrada ou j√° expirada."}
